using CodegenCS.Models;
using CodegenCS;
using NSwag;
using System;
using System.Collections.Generic;
using System.Linq;
using NJsonSchema;
using CodegenCS.Runtime;
using static CodegenCS.Symbols;
using System.Globalization;
using System.Text;
using System.Security;
using System.CommandLine;
using System.Xml.Linq;

namespace NSwagClient;

/// <summary>
/// NSwagClient.cs: Given an OpenAPI model (Swagger) will Generate REST Client (entities and web api calls)
///
/// Usage: dotnet-codegencs template run NSwagClient.cs <OpenApiDocument.json> <Namespace>
/// e.g.:  dotnet-codegencs template run NSwagClient.cs petstore-openapi3.json PetstoreClient
///
/// Arguments:
///  <Namespace>  Namespace of generated POCOs
///
/// </summary>
public class NSwagClient
{
    #region Members
    string _clientClassName;
    static Dictionary<JsonSchema, TypeDefinition> _types = new(); // Looks like NSwag doesn't preserve ref names, so we have to map from the object (JsonSchema) to find the Entity Key
    static Dictionary<Tuple<string, string>, string> _methodNames = new(); // OpenApiOperationDescription doesn't implement Equals so we have to compare by Operation/Path
    static int _operationCount;
    static int _currentOperation;
    static bool _enableNullableReferences = false;
    public class TypeDefinition
    {
        public string SchemaName { get; set; } // ORIGINAL name of the schema (template may modify)
        public JsonObjectType JsonObjectType { get; set; }
        public string FullTypeName { get; set; }
        public string ShortTypeName { get; set; }
        public string ReadonlyShortTypeName { get; set; } // usually this should be same as ShortTypeName, except for non-modifiable arrays when you want different types
        public bool IsEnum { get; set; } = false;
        public bool IsReferenceType { get; set; } = false;
        public JsonSchema JsonSchema { get; set; }
    }
    #endregion

    #region Template Options
    public class NSwagClientOptions : IAutoBindCommandLineArgs
    {
        /// <summary>
        /// Namespace of generated Client
        /// </summary>
        public string Namespace { get; set; } = "MyProject.NSwagClients";
    }
    #endregion

    //TODO: should probably create some attributes to allow templates to automatically get CLI parameters when they are NOT executed through CLI (e.g. UnitTests or VS Extension)
    // line [Model], maybe [CliArgs]
    // or maybe, just a [NoArgsEntryPoint]

    // Visual Studio Extension can be used to run templates (right click template and click "Run Template")
    // But it won't know WHICH MODEL to use. So this is an alternative entrypoint that specifies the model path.
    void TemplateMain(ICodegenContext context, IModelFactory factory)
    {
        var model = factory.LoadModelFromFile<OpenApiDocument>(@"Models\Petstore-OpenAPI3.json");
        var options = new NSwagClientOptions()
        {
            Namespace = "MyProject.NSwagClients"
        };
        Init(context, model, options);
        _operationCount = model.Operations.Count();
        _currentOperation = 0;

        context.DefaultOutputFile.Write($$"""
            //----------------------
            // <auto-generated>
            //     Generated using CodegenCS NSwagClient Template (https://github.com/CodegenCS/Templates/tree/main/OpenAPI/NSwagClient), by Rick Drizin
            //     This template was based on the NSwag toolchain v13.18.0.0 (http://NSwag.org)
            //     Original NSwag Template (by Rico Suter) under MIT license - license here: https://github.com/RicoSuter/NSwag/blob/master/LICENSE.md
            // </auto-generated>
            //----------------------

            #pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
            #pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
            #pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
            #pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
            #pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
            #pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
            #pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
            #pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

            namespace {{options.Namespace}}
            {
                using System = global::System;

                {{GenerateClientInterface}}

                {{GenerateClient}}
                {{_types.Select(m => GenerateEntity(m.Value))}}


                [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
                public partial class ApiException : System.Exception
                {
                    public int StatusCode { get; private set; }

                    public string Response { get; private set; }

                    public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

                    public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
                        : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
                    {
                        StatusCode = statusCode;
                        Response = response;
                        Headers = headers;
                    }

                    public override string ToString()
                    {
                        return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
                    }
                }

                [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
                public partial class ApiException<TResult> : ApiException
                {
                    public TResult Result { get; private set; }

                    public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
                        : base(message, statusCode, response, headers, innerException)
                    {
                        Result = result;
                    }
                }
            }

            #pragma warning restore 1591
            #pragma warning restore 1573
            #pragma warning restore  472
            #pragma warning restore  114
            #pragma warning restore  108
            #pragma warning restore 3016
            #pragma warning restore 8603
            """);
    }

    void Init(ICodegenContext context, OpenApiDocument model, NSwagClientOptions options)
    {
        if (string.IsNullOrEmpty(context.DefaultOutputFile.RelativePath))
            context.DefaultOutputFile.RelativePath = $"{this.GetType().Name}.g.cs";

        // Allow the following types to be injected into delegates
        context.DependencyContainer.RegisterSingleton(this);
        context.DependencyContainer.RegisterSingleton(model);
        context.DependencyContainer.RegisterSingleton(options);

        _types = new(); _methodNames = new(); // clearing statics just in case the same template is reused

        // components schemas //TODO: minor difference here - NSwagClientGenerator reserves the names of types based on the order of the operations, while we're starting from the components schemas (and recursively subtypes)
        foreach (var schema in model.Definitions)
            GetOrCreateTypeDefinition(schema.Value, schema.Key, isComponentSchemaRegistration: true);

        model.Operations.ToList().ForEach(op =>
        {
            string name = GetMethodName(op);
            int n = 1;
            string attemptName = name;
            while (_methodNames.ContainsValue(attemptName) && n < 100)
            {
                n++;
                attemptName = name + n.ToString();
            }
            _methodNames.Add(new Tuple<string, string>(op.Method, op.Path), attemptName);
        });

        _clientClassName = RemoveDiacritics(model.Info.Title);
        if (_clientClassName.StartsWith("Swagger"))
            _clientClassName = _clientClassName.Substring(8);
        _clientClassName = new System.Text.RegularExpressions.Regex(@"[^a-zA-Z0-9_]").Replace(_clientClassName, "");
    }

    static TypeDefinition GetOrCreateTypeDefinition(JsonSchema schema, string suggestedTypeName = null, bool isComponentSchemaRegistration = false)
    {
        if (schema == null)
            return null;

        if (schema.Type == JsonObjectType.None && (schema.Reference != null || schema.Item != null))
        {
            schema = schema.Reference ?? schema.Item;
        }

        // Since schemas are processed recursively it's possible that a component schema was already implicitly registered (WITHOUT the right name) while another schema (refering this one) was processed
        // When isComponentSchemaRegistration is true we will reprocess the schema even if it was already processed by some other schema, so that we can set the right name (give the right name to a type)
        if (_types.ContainsKey(schema) && !isComponentSchemaRegistration)
            return _types[schema];

        string schemaName = suggestedTypeName == null ? null : FirstLetterToUpper(string.Join("", suggestedTypeName.Replace("/", "").Split('-').Select(p => FirstLetterToUpper(p))));
        var typeDef = new TypeDefinition() { SchemaName = schemaName, JsonSchema = schema };

        if (schema.IsArray)
        {
            TypeDefinition underlyingType = GetOrCreateTypeDefinition(schema.Reference ?? schema.Item, suggestedTypeName /*+"s"*/);
            if (underlyingType == null)
                underlyingType = new TypeDefinition() { FullTypeName = "object", ShortTypeName = "object", ReadonlyShortTypeName = "object", IsReferenceType = true };
            typeDef.FullTypeName = $"System.Collections.Generic.ICollection<{underlyingType.FullTypeName}>";
            typeDef.ShortTypeName = $"System.Collections.Generic.ICollection<{underlyingType.ShortTypeName}>";
            typeDef.ReadonlyShortTypeName = $"System.Collections.Generic.IEnumerable<{underlyingType.ShortTypeName}>";
            typeDef.IsReferenceType = true;
            // Array types are not added to _types (should not generate a named type)
            return typeDef;
        }


        if (schema.IsDictionary)
            return new TypeDefinition() { FullTypeName = "System.Collections.Generic.IDictionary<string, object>", ShortTypeName = "System.Collections.Generic.IDictionary<string, object>" };

        if (schema.IsEnumeration)
        {
            typeDef.FullTypeName = typeDef.SchemaName;
            typeDef.ReadonlyShortTypeName = typeDef.ShortTypeName = GetTypeAlias(typeDef.FullTypeName);
            typeDef.IsEnum = true;
            typeDef.IsReferenceType = false;
            _types[schema]= typeDef;
            return typeDef;
        }

        if (schema.IsObject)
        {
            // Objects which are not Dictionaries should generate a class, and object properties might as well be other classes

            int n = 1;
            string attemptName = typeDef.SchemaName;
            while (!_types.ContainsKey(schema) && _types.Any(kv => kv.Value.FullTypeName == attemptName) && n < 100)
            {
                n++;
                attemptName = typeDef.SchemaName + n.ToString();
            }
            typeDef.FullTypeName = attemptName;

            typeDef.ReadonlyShortTypeName = typeDef.ShortTypeName = GetTypeAlias(typeDef.FullTypeName);
            typeDef.IsReferenceType = true;
            _types[schema] = typeDef; // generate a class (add to dictionary before child properties)
            foreach (var prop in schema.Properties)
            {
                // go recursively
                var childType = GetOrCreateTypeDefinition(prop.Value, prop.Key);
            }
            return typeDef;
        }

        (string typeName, bool isReferenceType) = GetFullTypeName(schema.Type, schema.Format, false  /*_enableNullableReferences && nullable == true*/);
        typeDef.FullTypeName = typeName;
        typeDef.ShortTypeName = typeDef.ReadonlyShortTypeName = GetTypeAlias(typeDef.FullTypeName);
        typeDef.IsReferenceType = isReferenceType; // most primitive types are value-types
        // Primitive types are not added to _types (should not generate a named type)


        return typeDef;
    }

    static Action<ICodegenContext, OpenApiOperationDescription> GenerateOperationInterface = (ctx, operation) =>
    {
        string operationName = GetMethodName(operation); 
        var successResponses = operation.Operation.Responses.Where(r => int.TryParse(r.Key, out var code) && code >= 200 && code < 300);
        string taskReturnType = "System.Threading.Tasks.Task";
        string returnType = successResponses.Any() ? GetTypeAlias(GetPreferredResponseType(successResponses.First().Value)) : null;
        if (returnType != null)
            taskReturnType += $"<{returnType}>";
        string returnDescription = string.Join("\r\nOR\r\n", successResponses.Select(r => r.Value.Description));
        var parms = operation.Operation.Parameters;
        var queryStringParms = operation.Operation.Parameters.Where(p => p.Kind == OpenApiParameterKind.Query);

        ctx.DefaultOutputFile.Write($$"""
            {{TLW}}{{IF(!string.IsNullOrEmpty(operation.Operation.Summary))}}
            /// <summary>
            /// {{EscapeXmlComments(operation.Operation.Summary)}}
            /// </summary>{{ENDIF}}
            {{TLW}}{{IF(!string.IsNullOrEmpty(operation.Operation.Description))}}
            /// <remarks>
            /// {{EscapeXmlComments(operation.Operation.Description)}}
            /// </remarks>{{ENDIF}}
            {{parms.Where(p => !string.IsNullOrEmpty(p.Description)).Select(p => $$$"""/// <param name="{{{FirstLetterToLower(p.Name)}}}">{{{p.Description}}}</param>""")}}
            /// <returns>{{returnDescription}}</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            {{taskReturnType}} {{operationName}}Async({{string.Join(", ", parms.Select(p => GetParameterType(p, operationName) + " " + FirstLetterToLower(p.Name)) )}});

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            {{TLW}}{{IF(!string.IsNullOrEmpty(operation.Operation.Summary))}}
            /// <summary>
            /// {{EscapeXmlComments(operation.Operation.Summary)}}
            /// </summary>{{ENDIF}}
            {{TLW}}{{IF(!string.IsNullOrEmpty(operation.Operation.Description))}}
            /// <remarks>
            /// {{EscapeXmlComments(operation.Operation.Description)}}
            /// </remarks>{{ENDIF}}
            {{parms.Where(p => !string.IsNullOrEmpty(p.Description)).Select(p => $$$"""/// <param name="{{{FirstLetterToLower(p.Name)}}}">{{{p.Description}}}</param>""")}}
            /// <returns>{{returnDescription}}</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            {{taskReturnType}} {{operationName}}Async({{string.Join("", parms.Select(p => GetParameterType(p, operationName) + " " + FirstLetterToLower(p.Name) + ", "))}}System.Threading.CancellationToken cancellationToken);
            """);
    };

    static Action<ICodegenContext, OpenApiOperationDescription> GenerateOperationImplementation = (ctx, operation) =>
    {
        string operationName = GetMethodName(operation);
        _currentOperation++;
        System.Diagnostics.Debug.WriteLine($"{operationName} ({_currentOperation}/{_operationCount})" );
        var successResponses = operation.Operation.Responses.Where(r => int.TryParse(r.Key, out var code) && code >= 200 && code < 300);
        string preferredResponseContentType = GetPreferredResponseContentType(successResponses.Any() ? successResponses.FirstOrDefault().Value : null);
        string preferredRequestContentType = GetPreferredRequestContentType(operation.Operation.RequestBody); // TODO: shouldn't we accept ALL types?
        string taskReturnType = "System.Threading.Tasks.Task";
        string returnType = successResponses.Any() ? GetTypeAlias(GetPreferredResponseType(successResponses.First().Value)) : null;
        if (returnType != null)
            taskReturnType += $"<{returnType}>";
        string returnDescription = string.Join("\r\nOR\r\n", successResponses.Select(r => r.Value.Description));
        var parms = operation.Operation.Parameters;
        var queryStringParms = operation.Operation.Parameters.Where(p => p.Kind == OpenApiParameterKind.Query);
        var bodyParms = operation.Operation.Parameters.Where(p => p.Kind == OpenApiParameterKind.Body);
        var pathParams = operation.Operation.Parameters.Where(p => p.Kind == OpenApiParameterKind.Path);
        ctx.DefaultOutputFile.Write($$"""
            {{IF(!string.IsNullOrEmpty(operation.Operation.Summary))}}
            /// <summary>
            /// {{EscapeXmlComments(operation.Operation.Summary)}}
            /// </summary>{{ENDIF}}
            {{TLW}}{{IF(!string.IsNullOrEmpty(operation.Operation.Description))}}
            /// <remarks>
            /// {{EscapeXmlComments(operation.Operation.Description)}}
            /// </remarks>{{ENDIF}}
            {{parms.Where(p => !string.IsNullOrEmpty(p.Description)).Select(p => $$$"""/// <param name="{{{FirstLetterToLower(p.Name)}}}">{{{p.Description}}}</param>""")}}
            /// <returns>{{returnDescription}}</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual {{taskReturnType}} {{operationName}}Async({{string.Join(", ", parms.Select(p => GetParameterType(p, operationName) + " " + FirstLetterToLower(p.Name)))}})
            {
                return {{operationName}}Async({{string.Join("", parms.Select(p => FirstLetterToLower(p.Name) + ", "))}}System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            {{IF(!string.IsNullOrEmpty(operation.Operation.Summary))}}/// <summary>
            /// {{EscapeXmlComments(operation.Operation.Summary)}}
            /// </summary>{{ENDIF}}
            {{TLW}}{{IF(!string.IsNullOrEmpty(operation.Operation.Description))}}
            /// <remarks>
            /// {{EscapeXmlComments(operation.Operation.Description)}}
            /// </remarks>{{ENDIF}}
            {{parms.Where(p => !string.IsNullOrEmpty(p.Description)).Select(p => $$$"""/// <param name="{{{FirstLetterToLower(p.Name)}}}">{{{p.Description}}}</param>""")}}
            /// <returns>{{returnDescription}}</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async {{taskReturnType}} {{operationName}}Async({{string.Join("", parms.Select(p => GetParameterType(p, operationName) + " " + FirstLetterToLower(p.Name) + ", "))}}System.Threading.CancellationToken cancellationToken)
            {{{IF(parms.Any(p=>p.IsRequired))}}
                {{parms.Where(p=>p.IsRequired).Select(param => (FormattableString)
                    $$"""
                    if ({{param.Name}} == null)
                        throw new System.ArgumentNullException("{{param.Name}}");
                    """)}}
                {{ENDIF}}
                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append("{{operation.Path.TrimStart('/') + (queryStringParms.Any() ? "?":"")}}");{{IF(pathParams.Any())}}
                {{pathParams.Select(param => (FormattableString)
                $$"""urlBuilder_.Replace("{{{param.Name}}}", System.Uri.EscapeDataString(ConvertToString({{FirstLetterToLower(param.Name)}}, System.Globalization.CultureInfo.InvariantCulture)));"""
                )}}{{ENDIF}}
                {{queryStringParms.Select(parm => (FormattableString)
                    $$"""
                        if ({{FirstLetterToLower(parm.Name)}} != null)
                        {
                            {{IF(parm.Schema != null && parm.Schema.IsArray)}}foreach (var item_ in {{FirstLetterToLower(parm.Name)}}) { urlBuilder_.Append(System.Uri.EscapeDataString("{{parm.Name}}") + "=").Append(System.Uri.EscapeDataString({{ConvertParmToString(parm, "item_")}})).Append("&"); }
                            {{ELSE}}urlBuilder_.Append(System.Uri.EscapeDataString("{{parm.Name}}") + "=").Append(System.Uri.EscapeDataString({{ConvertParmToString(parm, FirstLetterToLower(parm.Name))}})).Append("&");{{ENDIF}}
                        }
                        """
                ).Render(RenderEnumerableOptions.LineBreaksWithoutSpacer)}}{{IF(queryStringParms.Any())}}
                urlBuilder_.Length--;{{ENDIF}}

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        {{IF(operation.Method=="post" && bodyParms.Count()==0)}}request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "{{preferredRequestContentType}}");
                        {{ENDIF}}{{IF(operation.Method == "post" && bodyParms.Count()==1)}}var json_ = Newtonsoft.Json.JsonConvert.SerializeObject({{FirstLetterToLower(bodyParms.SingleOrDefault()?.Name)}}, _settings.Value);
                        {{IF(preferredRequestContentType == "application/x-www-form-urlencoded")}}var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                        var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);{{ELSE}}var content_ = new System.Net.Http.StringContent(json_);{{ENDIF}}
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("{{preferredRequestContentType}}");
                        request_.Content = content_;
                        {{ENDIF}}request_.Method = new System.Net.Http.HttpMethod("{{operation.Method.ToUpper()}}");{{IF(preferredResponseContentType != null)}}
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("{{ preferredResponseContentType }}"));{{ENDIF}}

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            {{(ICodegenTextWriter w) =>
                            {
                                bool elseif = false;
                                foreach(var response in operation.Operation.Responses.Where(r => int.TryParse(r.Key, out var code)))
                                {
                                    bool isSuccessResponse = int.Parse(response.Key) >= 200 && int.Parse(response.Key) < 300;
                                    string responseReturnType = GetTypeAlias(GetPreferredResponseType(response.Value));
                                    w.WriteLine($$"""
                                            {{(elseif ? "else\r\n" : "")}}if (status_ == {{response.Key}})
                                            {
                                                {{(ICodegenTextWriter w) =>
                                                {
                                                    if (responseReturnType == null && isSuccessResponse)
                                                    {
                                                        w.Write("return;");
                                                        return;
                                                    }
                                                    if (responseReturnType == null)
                                                    {
                                                        w.Write($$"""
                                                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                                            throw new ApiException("{{response.Value.Description}}", status_, responseText_, headers_, null);
                                                            """);
                                                        return;
                                                    }


                                                    w.WriteLine($$"""
                                                        var objectResponse_ = await ReadObjectResponseAsync<{{responseReturnType}}>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                                        if (objectResponse_.Object == null)
                                                        {
                                                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                                        }
                                                        """);
                                                    if (isSuccessResponse || string.IsNullOrEmpty(response.Value.Description))
                                                        w.Write($$"""
                                                            return objectResponse_.Object;
                                                            """);
                                                    else
                                                        w.Write($$"""
                                                            throw new ApiException<string>("{{response.Value.Description}}", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                                                            """);
                                                }}}
                                            }
                                            """);
                                    elseif = true;
                                }
                                var defaultResponse = operation.Operation.Responses.SingleOrDefault(response => response.Key == "default");
                                if (defaultResponse.Key != null)
                                    w.Write($$"""
                                        else
                                        {
                                            var objectResponse_ = await ReadObjectResponseAsync<{{GetTypeAlias(GetPreferredResponseType(defaultResponse.Value))}}>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                            if (objectResponse_.Object == null)
                                            {
                                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                            }
                                            throw new ApiException<Error>("unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                                        }
                                        """);
                                else
                                    w.Write($$"""
                                        else
                                        {
                                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                                        }
                                        """);
                            }}}
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            """);
    };

    Action<ICodegenContext, NSwagClient, OpenApiDocument> GenerateClientInterface = (ctx, template, model) =>
    {
        ctx.DefaultOutputFile.Write($$"""
            [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
            public partial interface I{{template._clientClassName}}Client
            {
                {{model.Operations.ToList().Select(o => GenerateOperationInterface.WithArguments(ctx, o)).Render(RenderEnumerableOptions.LineBreaksWithoutSpacer)}}
            }
            """);
    };

    #region GenerateClient
    Func<ICodegenContext, NSwagClient, OpenApiDocument, FormattableString> GenerateClient = (ctx, template, model) => $$"""
        [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
        public partial class {{template._clientClassName}}Client : I{{template._clientClassName}}Client
        {
            private System.Net.Http.HttpClient _httpClient;
            private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

            public {{template._clientClassName}}Client(System.Net.Http.HttpClient httpClient)
            {
                _httpClient = httpClient;
                _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
            }

            private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            }

            protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

            partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
            partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

            {{model.Operations.ToList().Select(o => GenerateOperationImplementation.WithArguments(ctx, o))}}

            protected struct ObjectResponseResult<T>
            {
                public ObjectResponseResult(T responseObject, string responseText)
                {
                    this.Object = responseObject;
                    this.Text = responseText;
                }

                public T Object { get; }

                public string Text { get; }
            }

            public bool ReadResponseAsString { get; set; }

            protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
            {
                if (response == null || response.Content == null)
                {
                    return new ObjectResponseResult<T>(default(T), string.Empty);
                }

                if (ReadResponseAsString)
                {
                    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    try
                    {
                        var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                        return new ObjectResponseResult<T>(typedBody, responseText);
                    }
                    catch (Newtonsoft.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                    }
                }
                else
                {
                    try
                    {
                        using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                        using (var streamReader = new System.IO.StreamReader(responseStream))
                        using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                        {
                            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                            var typedBody = serializer.Deserialize<T>(jsonTextReader);
                            return new ObjectResponseResult<T>(typedBody, string.Empty);
                        }
                    }
                    catch (Newtonsoft.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                    }
                }
            }

            private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
            {
                if (value == null)
                {
                    return "";
                }

                if (value is System.Enum)
                {
                    var name = System.Enum.GetName(value.GetType(), value);
                    if (name != null)
                    {
                        var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                        if (field != null)
                        {
                            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                                as System.Runtime.Serialization.EnumMemberAttribute;
                            if (attribute != null)
                            {
                                return attribute.Value != null ? attribute.Value : name;
                            }
                        }

                        var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                        return converted == null ? string.Empty : converted;
                    }
                }
                else if (value is bool) 
                {
                    return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
                }
                else if (value is byte[])
                {
                    return System.Convert.ToBase64String((byte[]) value);
                }
                else if (value.GetType().IsArray)
                {
                    var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                    return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
                }

                var result = System.Convert.ToString(value, cultureInfo);
                return result == null ? "" : result;
            }
        }
        """;
    #endregion


    FormattableString GenerateEntity(TypeDefinition entity)
    {
        JsonSchema schema = entity.JsonSchema;
        if (schema.IsArray) // differently from NSwagClientGenerator we're currently NOT generating wrapper-classes for arrays
        {
            var reference = schema.Item.Reference;
            var arrayType = _types[reference].ShortTypeName;
            return $$"""

                [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
                public partial class {{entity.ShortTypeName}} : System.Collections.ObjectModel.Collection<{{arrayType.Replace(".", "")}}>
                {
                }
                """;
        }

        if (schema.IsEnumeration)
        {
            return $$"""

            [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
            public enum {{entity.ShortTypeName}}
            {
                {{schema.Enumeration.Select(en => (FormattableString) $$"""_{{en}} = {{en}},{{Environment.NewLine}}{{Environment.NewLine}}""")}}
            }
            """;
        }

        return $$"""

            [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
            public partial class {{entity.ShortTypeName}}
            {
                {{schema.Properties.Select(prop => GenerateProperty.WithArguments(null, prop))}}

                {{IF(schema.AllowAdditionalProperties)}}private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

                [Newtonsoft.Json.JsonExtensionData]
                public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
                {
                    get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
                    set { _additionalProperties = value; }
                }{{ENDIF}}
            }
            """;
    }
    Action<ICodegenTextWriter, KeyValuePair<string, NJsonSchema.JsonSchemaProperty>> GenerateProperty = (w, prop) =>
    {
        List<string> props = new List<string>();
        if (prop.Value.IsRequired)
            props.Add("Required = Newtonsoft.Json.Required.Always");
        else if (prop.Value.IsNullableRaw == true)
        {
            props.Add("Required = Newtonsoft.Json.Required.Default");
            props.Add("NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore");
        }
        else
        {
            props.Add("Required = Newtonsoft.Json.Required.DisallowNull");
            props.Add("NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore");
        }
        if (!string.IsNullOrEmpty(prop.Value.Description))
            w.WriteLine($$"""
                /// <summary>
                /// {{EscapeXmlComments(prop.Value.Description)}}
                /// </summary>
                """);
        w.WriteLine($$"""[Newtonsoft.Json.JsonProperty("{{prop.Value.Name}}"{{string.Join("", props.Select(p => ", " + p)) }})]""");
        var type = GetOrCreateTypeDefinition(prop.Value);
        bool nullable = prop.Value.IsNullableRaw == true && (_enableNullableReferences || !type.IsReferenceType);

        if (type.ShortTypeName == "string" && prop.Value.IsRequired == true)
            w.WriteLine("[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]");
        w.Write($$"""public {{type.ShortTypeName}}{{(nullable ? "?" : "")}} {{FirstLetterToUpper(prop.Value.Name)}} { get; set; }""");
        if (prop.Value.Default != null)
        {
            if (type.ShortTypeName=="string")
                w.Write($$""" = "{{prop.Value.Default.ToString()}}";""");
            else
                w.Write($$""" = {{prop.Value.Default.ToString()}};""");
        }
            
    };

    
    /// <summary>
    /// Converts from JsonObjectType+Format to a C# Type. 
    /// </summary>
    /// <param name="type"></param>
    /// <param name="format"></param>
    /// <param name="nullable"></param>
    static (string typeName, bool isReferenceType) GetFullTypeName(JsonObjectType type, string format, bool? nullable = false)
    {
        if (type.HasFlag(JsonObjectType.Integer) || type.HasFlag(JsonObjectType.Null))
        {
            switch (format)
            {
                case "int64":
                    return ("long" + (nullable == true ? "?" : ""), false);
                case "double":
                    return ("double" + (nullable == true ? "?" : ""), false);
                case "int32":
                default:
                    return ("int" + (nullable == true ? "?" : ""), false);
            }
        }
        if (type.HasFlag(JsonObjectType.String))
        {
            switch (format)
            {
                case "date-time":
                    return ("System.DateTimeOffset" + (nullable == true ? "?" : ""), false);
                default:
                    return ("string", true);
            }
        }
        if (type.HasFlag(JsonObjectType.Boolean))
            return ("bool" + (nullable == true ? "?" : ""), false);
        if (type.HasFlag(JsonObjectType.None) || type.HasFlag(JsonObjectType.Object))
            return ("object", true);

        if (type.HasFlag(JsonObjectType.Null) || type.HasFlag(JsonObjectType.File))
        {
            if (System.Diagnostics.Debugger.IsAttached)
                System.Diagnostics.Debugger.Break();
            return ("object", true);
        }

        if (type.HasFlag(JsonObjectType.Array))
            throw new NotImplementedException(); // arrays should never arrive here

        if (System.Diagnostics.Debugger.IsAttached)
            System.Diagnostics.Debugger.Break();
        return (type.ToString(), false);
    }
    static string GetParameterType(OpenApiParameter parameter, string operationName)
    {
        var schema = parameter.Schema;
        if (parameter.Type == JsonObjectType.None && (parameter.Reference != null || parameter.Item != null))
            schema = parameter.Reference ?? parameter.Item;
        var operation = (OpenApiOperation)parameter.Parent;
        var type = GetOrCreateTypeDefinition(schema, parameter.Name);
        bool referenceType;
        string typeName;
        bool nullable = (schema?.IsNullableRaw == true || !parameter.IsRequired);
        if (type == null || schema == null)
        {
            (typeName, referenceType) = GetFullTypeName(parameter.Type, parameter.Format, nullable);
        }
        else
        {
            referenceType = type.IsReferenceType;
            typeName = type.ReadonlyShortTypeName;
        }
        nullable = nullable && (_enableNullableReferences || !referenceType);
        return typeName + (nullable ? "?" : "");
    }

    static string GetMethodName(OpenApiOperationDescription operation)
    {
        if (_methodNames.ContainsKey(new Tuple<string, string>(operation.Method, operation.Path)))
            return _methodNames[new Tuple<string, string>(operation.Method, operation.Path)];
        string name = operation.Operation.OperationId;
        if (name == null)
        {
            name = operation.Path.TrimEnd('/');
            if (name.Contains("{"))
            {
                name = name.Substring(0, name.IndexOf("{")).TrimEnd('/');
            }
            if (name.Contains("/"))
                name = name.Substring(name.LastIndexOf("/") + 1);
        }
        name = string.Join("", name.Replace("/", "_").Split('-').Select(p => FirstLetterToUpper(p)));
        return name;
    }
    static string EscapeXmlComments(string text)
    {
        if (string.IsNullOrEmpty(text))
            return text;
        text = SecurityElement.Escape(text).Replace("&quot;", "\"").Replace("&apos;", "'"); // is there any better way to escape for xmldoc?
        return string.Join("\r\n<br/>", text.Split(new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries).Select(t => t.TrimEnd('\r', '\n').TrimStart('\r', '\n')));
    }
    static string GetTypeAlias(string fullType)
    {
        if (string.IsNullOrEmpty(fullType))
            return fullType;
        if (fullType.TrimEnd('?') == "System.DateTimeOffset")
            return fullType;
        if (fullType.StartsWith("System.Collections.Generic.IEnumerable<"))
            return fullType;
        if (fullType.StartsWith("System.Collections.Generic.ICollection<"))
            return fullType;
        if (string.IsNullOrEmpty(fullType))
            return fullType;
        if (fullType.Contains("."))
            fullType = fullType.Substring(fullType.LastIndexOf(".") + 1);
        return fullType;
    }
    static string GetPreferredResponseContentType(OpenApiResponse response)
    {
        return response?.Content.Keys.FirstOrDefault();
    }
    static string GetPreferredRequestContentType(OpenApiRequestBody request)
    {
        return request?.Content?.Keys?.FirstOrDefault(k => !string.IsNullOrEmpty(k)) ?? "application/json";
    }
    static string GetPreferredResponseType(OpenApiResponse response)
    {
        var contentType = GetPreferredResponseContentType(response);
            
        if (contentType != null)
        {
            var responseSchema = response.Content[contentType].Schema;
            var type = GetOrCreateTypeDefinition(responseSchema, "Response");
            bool nullable = false;
            // TODO: returned lists should be ShortTypeName (ICollection) or ReadonlyShortTypeName (IEnumerable )?
            return type.ReadonlyShortTypeName + (nullable ? "?" : "");
        }
        return null;
    }

    static string ConvertParmToString(OpenApiParameter parm, string parmName)
    {
        if (parm.Schema != null && parm.Schema.Type == JsonObjectType.String && parm.Schema.Format == "date-time")
            return $$"""{{parmName}}{{(parm.IsRequired == false ? ".Value" : "")}}.ToString("s", System.Globalization.CultureInfo.InvariantCulture)""";
        return $$"""ConvertToString({{parmName}}, System.Globalization.CultureInfo.InvariantCulture)""";
    }

    #region String Functions
    static string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;

        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);

        return str.ToUpper();
    }
    static string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;

        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);

        return str.ToLower();
    }

    static string RemoveDiacritics(string text)
    {
        var normalizedString = text.Normalize(NormalizationForm.FormD);
        var stringBuilder = new StringBuilder(capacity: normalizedString.Length);

        for (int i = 0; i < normalizedString.Length; i++)
        {
            char c = normalizedString[i];
            var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(c);
            if (unicodeCategory != UnicodeCategory.NonSpacingMark)
            {
                stringBuilder.Append(c);
            }
        }

        return stringBuilder
            .ToString()
            .Normalize(NormalizationForm.FormC);
    }
    #endregion

}
