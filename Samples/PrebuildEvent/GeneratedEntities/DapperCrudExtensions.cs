//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by dotnet-codegencs tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Dapper;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Runtime.CompilerServices;
using SampleProject.Core.Entities;

namespace SampleProject.Core.Database
{
    /// <summary>
    /// CRUD static extensions using Dapper (using static SQL statements)
    /// </summary>
    public static class DapperCrudExtensions
    {
        #region Address
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveAddress(this IDbConnection conn, Address e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.AddressId == default(int))
                conn.InsertAddress(e, transaction, commandTimeout);
            else
                conn.UpdateAddress(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveAddress_by_rowguid(this IDbConnection conn, Address e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertAddress(e, transaction, commandTimeout);
            else
                conn.UpdateAddress_by_rowguid(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveAddress_by_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode(this IDbConnection conn, Address e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.AddressLine1 == null && e.AddressLine2 == null && e.City == null && e.StateProvinceId == default(int) && e.PostalCode == null)
                conn.InsertAddress(e, transaction, commandTimeout);
            else
                conn.UpdateAddress_by_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertAddress(this IDbConnection conn, Address e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Person].[Address]
                (
                    [AddressLine1],
                    [AddressLine2],
                    [City],
                    [ModifiedDate],
                    [PostalCode],
                    [StateProvinceID]
                )
                VALUES
                (
                    @AddressLine1,
                    @AddressLine2,
                    @City,
                    @ModifiedDate,
                    @PostalCode,
                    @StateProvinceId
                )";
            e.AddressId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateAddress(this IDbConnection conn, Address e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[Address] SET
                    [AddressLine1] = @AddressLine1,
                    [AddressLine2] = @AddressLine2,
                    [City] = @City,
                    [ModifiedDate] = @ModifiedDate,
                    [PostalCode] = @PostalCode,
                    [StateProvinceID] = @StateProvinceId
                WHERE
                    [AddressID] = @AddressId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateAddress_by_rowguid(this IDbConnection conn, Address e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[Address] SET
                    [AddressLine1] = @AddressLine1,
                    [AddressLine2] = @AddressLine2,
                    [City] = @City,
                    [ModifiedDate] = @ModifiedDate,
                    [PostalCode] = @PostalCode,
                    [StateProvinceID] = @StateProvinceId
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateAddress_by_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode(this IDbConnection conn, Address e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[Address] SET
                    [AddressLine1] = @AddressLine1,
                    [AddressLine2] = @AddressLine2,
                    [City] = @City,
                    [ModifiedDate] = @ModifiedDate,
                    [PostalCode] = @PostalCode,
                    [StateProvinceID] = @StateProvinceId
                WHERE
                    [AddressLine1] = @AddressLine1 AND
                    [AddressLine2] = @AddressLine2 AND
                    [City] = @City AND
                    [StateProvinceID] = @StateProvinceId AND
                    [PostalCode] = @PostalCode";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteAddress(this IDbConnection conn, Address e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[Address]
                WHERE
                    [AddressID] = @AddressId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteAddress(this IDbConnection conn, int AddressId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[Address]
                WHERE
                    [AddressID] = @AddressId";
            int deleted = conn.Execute(cmd, new { AddressId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Address

        #region AddressType
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveAddressType(this IDbConnection conn, AddressType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.AddressTypeId == default(int))
                conn.InsertAddressType(e, transaction, commandTimeout);
            else
                conn.UpdateAddressType(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveAddressType_by_Name(this IDbConnection conn, AddressType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertAddressType(e, transaction, commandTimeout);
            else
                conn.UpdateAddressType_by_Name(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveAddressType_by_rowguid(this IDbConnection conn, AddressType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertAddressType(e, transaction, commandTimeout);
            else
                conn.UpdateAddressType_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertAddressType(this IDbConnection conn, AddressType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Person].[AddressType]
                (
                    [ModifiedDate],
                    [Name]
                )
                VALUES
                (
                    @ModifiedDate,
                    @Name
                )";
            e.AddressTypeId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateAddressType(this IDbConnection conn, AddressType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[AddressType] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [AddressTypeID] = @AddressTypeId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateAddressType_by_Name(this IDbConnection conn, AddressType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[AddressType] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateAddressType_by_rowguid(this IDbConnection conn, AddressType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[AddressType] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteAddressType(this IDbConnection conn, AddressType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[AddressType]
                WHERE
                    [AddressTypeID] = @AddressTypeId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteAddressType(this IDbConnection conn, int AddressTypeId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[AddressType]
                WHERE
                    [AddressTypeID] = @AddressTypeId";
            int deleted = conn.Execute(cmd, new { AddressTypeId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion AddressType

        #region AWBuildVersion
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveAWBuildVersion(this IDbConnection conn, AWBuildVersion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SystemInformationId == default(byte))
                conn.InsertAWBuildVersion(e, transaction, commandTimeout);
            else
                conn.UpdateAWBuildVersion(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertAWBuildVersion(this IDbConnection conn, AWBuildVersion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [AWBuildVersion]
                (
                    [Database Version],
                    [ModifiedDate],
                    [VersionDate]
                )
                VALUES
                (
                    @DatabaseVersion,
                    @ModifiedDate,
                    @VersionDate
                )";
            e.SystemInformationId = conn.Query<byte>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateAWBuildVersion(this IDbConnection conn, AWBuildVersion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [AWBuildVersion] SET
                    [Database Version] = @DatabaseVersion,
                    [ModifiedDate] = @ModifiedDate,
                    [VersionDate] = @VersionDate
                WHERE
                    [SystemInformationID] = @SystemInformationId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteAWBuildVersion(this IDbConnection conn, AWBuildVersion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [AWBuildVersion]
                WHERE
                    [SystemInformationID] = @SystemInformationId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteAWBuildVersion(this IDbConnection conn, byte SystemInformationId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [AWBuildVersion]
                WHERE
                    [SystemInformationID] = @SystemInformationId";
            int deleted = conn.Execute(cmd, new { SystemInformationId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion AWBuildVersion

        #region BillOfMaterials
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveBillOfMaterials(this IDbConnection conn, BillOfMaterials e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BillOfMaterialsId == default(int))
                conn.InsertBillOfMaterials(e, transaction, commandTimeout);
            else
                conn.UpdateBillOfMaterials(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveBillOfMaterials_by_ProductAssemblyID_ComponentID_StartDate(this IDbConnection conn, BillOfMaterials e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductAssemblyId == null && e.ComponentId == default(int) && e.StartDate == default(DateTime))
                conn.InsertBillOfMaterials(e, transaction, commandTimeout);
            else
                conn.UpdateBillOfMaterials_by_ProductAssemblyID_ComponentID_StartDate(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertBillOfMaterials(this IDbConnection conn, BillOfMaterials e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[BillOfMaterials]
                (
                    [BOMLevel],
                    [ComponentID],
                    [EndDate],
                    [ModifiedDate],
                    [PerAssemblyQty],
                    [ProductAssemblyID],
                    [StartDate],
                    [UnitMeasureCode]
                )
                VALUES
                (
                    @BomLevel,
                    @ComponentId,
                    @EndDate,
                    @ModifiedDate,
                    @PerAssemblyQty,
                    @ProductAssemblyId,
                    @StartDate,
                    @UnitMeasureCode
                )";
            e.BillOfMaterialsId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateBillOfMaterials(this IDbConnection conn, BillOfMaterials e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[BillOfMaterials] SET
                    [BOMLevel] = @BomLevel,
                    [ComponentID] = @ComponentId,
                    [EndDate] = @EndDate,
                    [ModifiedDate] = @ModifiedDate,
                    [PerAssemblyQty] = @PerAssemblyQty,
                    [ProductAssemblyID] = @ProductAssemblyId,
                    [StartDate] = @StartDate,
                    [UnitMeasureCode] = @UnitMeasureCode
                WHERE
                    [BillOfMaterialsID] = @BillOfMaterialsId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateBillOfMaterials_by_ProductAssemblyID_ComponentID_StartDate(this IDbConnection conn, BillOfMaterials e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[BillOfMaterials] SET
                    [BOMLevel] = @BomLevel,
                    [ComponentID] = @ComponentId,
                    [EndDate] = @EndDate,
                    [ModifiedDate] = @ModifiedDate,
                    [PerAssemblyQty] = @PerAssemblyQty,
                    [ProductAssemblyID] = @ProductAssemblyId,
                    [StartDate] = @StartDate,
                    [UnitMeasureCode] = @UnitMeasureCode
                WHERE
                    [ProductAssemblyID] = @ProductAssemblyId AND
                    [ComponentID] = @ComponentId AND
                    [StartDate] = @StartDate";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteBillOfMaterials(this IDbConnection conn, BillOfMaterials e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[BillOfMaterials]
                WHERE
                    [BillOfMaterialsID] = @BillOfMaterialsId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteBillOfMaterials(this IDbConnection conn, int BillOfMaterialsId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[BillOfMaterials]
                WHERE
                    [BillOfMaterialsID] = @BillOfMaterialsId";
            int deleted = conn.Execute(cmd, new { BillOfMaterialsId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion BillOfMaterials

        #region BusinessEntity
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveBusinessEntity(this IDbConnection conn, BusinessEntity e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                conn.InsertBusinessEntity(e, transaction, commandTimeout);
            else
                conn.UpdateBusinessEntity(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveBusinessEntity_by_rowguid(this IDbConnection conn, BusinessEntity e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertBusinessEntity(e, transaction, commandTimeout);
            else
                conn.UpdateBusinessEntity_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertBusinessEntity(this IDbConnection conn, BusinessEntity e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Person].[BusinessEntity]
                (
                    [ModifiedDate]
                )
                VALUES
                (
                    @ModifiedDate
                )";
            e.BusinessEntityId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateBusinessEntity(this IDbConnection conn, BusinessEntity e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[BusinessEntity] SET
                    [ModifiedDate] = @ModifiedDate
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateBusinessEntity_by_rowguid(this IDbConnection conn, BusinessEntity e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[BusinessEntity] SET
                    [ModifiedDate] = @ModifiedDate
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteBusinessEntity(this IDbConnection conn, BusinessEntity e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[BusinessEntity]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteBusinessEntity(this IDbConnection conn, int BusinessEntityId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[BusinessEntity]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, new { BusinessEntityId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion BusinessEntity

        #region BusinessEntityAddress
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveBusinessEntityAddress(this IDbConnection conn, BusinessEntityAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.AddressId == default(int) && e.AddressTypeId == default(int))
                conn.InsertBusinessEntityAddress(e, transaction, commandTimeout);
            else
                conn.UpdateBusinessEntityAddress(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveBusinessEntityAddress_by_rowguid(this IDbConnection conn, BusinessEntityAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertBusinessEntityAddress(e, transaction, commandTimeout);
            else
                conn.UpdateBusinessEntityAddress_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertBusinessEntityAddress(this IDbConnection conn, BusinessEntityAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Person].[BusinessEntityAddress]
                (
                    [AddressID],
                    [AddressTypeID],
                    [BusinessEntityID],
                    [ModifiedDate]
                )
                VALUES
                (
                    @AddressId,
                    @AddressTypeId,
                    @BusinessEntityId,
                    @ModifiedDate
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateBusinessEntityAddress(this IDbConnection conn, BusinessEntityAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[BusinessEntityAddress] SET
                    [AddressID] = @AddressId,
                    [AddressTypeID] = @AddressTypeId,
                    [BusinessEntityID] = @BusinessEntityId,
                    [ModifiedDate] = @ModifiedDate
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [AddressID] = @AddressId AND
                    [AddressTypeID] = @AddressTypeId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateBusinessEntityAddress_by_rowguid(this IDbConnection conn, BusinessEntityAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[BusinessEntityAddress] SET
                    [AddressID] = @AddressId,
                    [AddressTypeID] = @AddressTypeId,
                    [BusinessEntityID] = @BusinessEntityId,
                    [ModifiedDate] = @ModifiedDate
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteBusinessEntityAddress(this IDbConnection conn, BusinessEntityAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[BusinessEntityAddress]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [AddressID] = @AddressId AND
                    [AddressTypeID] = @AddressTypeId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteBusinessEntityAddress(this IDbConnection conn, int BusinessEntityId, int AddressId, int AddressTypeId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[BusinessEntityAddress]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [AddressID] = @AddressId AND
                    [AddressTypeID] = @AddressTypeId";
            int deleted = conn.Execute(cmd, new { BusinessEntityId, AddressId, AddressTypeId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion BusinessEntityAddress

        #region BusinessEntityContact
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveBusinessEntityContact(this IDbConnection conn, BusinessEntityContact e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.PersonId == default(int) && e.ContactTypeId == default(int))
                conn.InsertBusinessEntityContact(e, transaction, commandTimeout);
            else
                conn.UpdateBusinessEntityContact(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveBusinessEntityContact_by_rowguid(this IDbConnection conn, BusinessEntityContact e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertBusinessEntityContact(e, transaction, commandTimeout);
            else
                conn.UpdateBusinessEntityContact_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertBusinessEntityContact(this IDbConnection conn, BusinessEntityContact e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Person].[BusinessEntityContact]
                (
                    [BusinessEntityID],
                    [ContactTypeID],
                    [ModifiedDate],
                    [PersonID]
                )
                VALUES
                (
                    @BusinessEntityId,
                    @ContactTypeId,
                    @ModifiedDate,
                    @PersonId
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateBusinessEntityContact(this IDbConnection conn, BusinessEntityContact e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[BusinessEntityContact] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [ContactTypeID] = @ContactTypeId,
                    [ModifiedDate] = @ModifiedDate,
                    [PersonID] = @PersonId
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [PersonID] = @PersonId AND
                    [ContactTypeID] = @ContactTypeId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateBusinessEntityContact_by_rowguid(this IDbConnection conn, BusinessEntityContact e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[BusinessEntityContact] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [ContactTypeID] = @ContactTypeId,
                    [ModifiedDate] = @ModifiedDate,
                    [PersonID] = @PersonId
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteBusinessEntityContact(this IDbConnection conn, BusinessEntityContact e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[BusinessEntityContact]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [PersonID] = @PersonId AND
                    [ContactTypeID] = @ContactTypeId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteBusinessEntityContact(this IDbConnection conn, int BusinessEntityId, int PersonId, int ContactTypeId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[BusinessEntityContact]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [PersonID] = @PersonId AND
                    [ContactTypeID] = @ContactTypeId";
            int deleted = conn.Execute(cmd, new { BusinessEntityId, PersonId, ContactTypeId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion BusinessEntityContact

        #region ContactType
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveContactType(this IDbConnection conn, ContactType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ContactTypeId == default(int))
                conn.InsertContactType(e, transaction, commandTimeout);
            else
                conn.UpdateContactType(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveContactType_by_Name(this IDbConnection conn, ContactType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertContactType(e, transaction, commandTimeout);
            else
                conn.UpdateContactType_by_Name(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertContactType(this IDbConnection conn, ContactType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Person].[ContactType]
                (
                    [ModifiedDate],
                    [Name]
                )
                VALUES
                (
                    @ModifiedDate,
                    @Name
                )";
            e.ContactTypeId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateContactType(this IDbConnection conn, ContactType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[ContactType] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [ContactTypeID] = @ContactTypeId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateContactType_by_Name(this IDbConnection conn, ContactType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[ContactType] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteContactType(this IDbConnection conn, ContactType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[ContactType]
                WHERE
                    [ContactTypeID] = @ContactTypeId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteContactType(this IDbConnection conn, int ContactTypeId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[ContactType]
                WHERE
                    [ContactTypeID] = @ContactTypeId";
            int deleted = conn.Execute(cmd, new { ContactTypeId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ContactType

        #region CountryRegion
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCountryRegion(this IDbConnection conn, CountryRegion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CountryRegionCode == null)
                conn.InsertCountryRegion(e, transaction, commandTimeout);
            else
                conn.UpdateCountryRegion(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCountryRegion_by_Name(this IDbConnection conn, CountryRegion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertCountryRegion(e, transaction, commandTimeout);
            else
                conn.UpdateCountryRegion_by_Name(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertCountryRegion(this IDbConnection conn, CountryRegion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Person].[CountryRegion]
                (
                    [CountryRegionCode],
                    [ModifiedDate],
                    [Name]
                )
                VALUES
                (
                    @CountryRegionCode,
                    @ModifiedDate,
                    @Name
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCountryRegion(this IDbConnection conn, CountryRegion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[CountryRegion] SET
                    [CountryRegionCode] = @CountryRegionCode,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [CountryRegionCode] = @CountryRegionCode";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCountryRegion_by_Name(this IDbConnection conn, CountryRegion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[CountryRegion] SET
                    [CountryRegionCode] = @CountryRegionCode,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteCountryRegion(this IDbConnection conn, CountryRegion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[CountryRegion]
                WHERE
                    [CountryRegionCode] = @CountryRegionCode";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteCountryRegion(this IDbConnection conn, string CountryRegionCode, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[CountryRegion]
                WHERE
                    [CountryRegionCode] = @CountryRegionCode";
            int deleted = conn.Execute(cmd, new { CountryRegionCode }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion CountryRegion

        #region CountryRegionCurrency
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCountryRegionCurrency(this IDbConnection conn, CountryRegionCurrency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CountryRegionCode == null && e.CurrencyCode == null)
                conn.InsertCountryRegionCurrency(e, transaction, commandTimeout);
            else
                conn.UpdateCountryRegionCurrency(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertCountryRegionCurrency(this IDbConnection conn, CountryRegionCurrency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[CountryRegionCurrency]
                (
                    [CountryRegionCode],
                    [CurrencyCode],
                    [ModifiedDate]
                )
                VALUES
                (
                    @CountryRegionCode,
                    @CurrencyCode,
                    @ModifiedDate
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCountryRegionCurrency(this IDbConnection conn, CountryRegionCurrency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[CountryRegionCurrency] SET
                    [CountryRegionCode] = @CountryRegionCode,
                    [CurrencyCode] = @CurrencyCode,
                    [ModifiedDate] = @ModifiedDate
                WHERE
                    [CountryRegionCode] = @CountryRegionCode AND
                    [CurrencyCode] = @CurrencyCode";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteCountryRegionCurrency(this IDbConnection conn, CountryRegionCurrency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[CountryRegionCurrency]
                WHERE
                    [CountryRegionCode] = @CountryRegionCode AND
                    [CurrencyCode] = @CurrencyCode";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteCountryRegionCurrency(this IDbConnection conn, string CountryRegionCode, string CurrencyCode, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[CountryRegionCurrency]
                WHERE
                    [CountryRegionCode] = @CountryRegionCode AND
                    [CurrencyCode] = @CurrencyCode";
            int deleted = conn.Execute(cmd, new { CountryRegionCode, CurrencyCode }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion CountryRegionCurrency

        #region CreditCard
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCreditCard(this IDbConnection conn, CreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CreditCardId == default(int))
                conn.InsertCreditCard(e, transaction, commandTimeout);
            else
                conn.UpdateCreditCard(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCreditCard_by_CardNumber(this IDbConnection conn, CreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CardNumber == null)
                conn.InsertCreditCard(e, transaction, commandTimeout);
            else
                conn.UpdateCreditCard_by_CardNumber(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertCreditCard(this IDbConnection conn, CreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[CreditCard]
                (
                    [CardNumber],
                    [CardType],
                    [ExpMonth],
                    [ExpYear],
                    [ModifiedDate]
                )
                VALUES
                (
                    @CardNumber,
                    @CardType,
                    @ExpMonth,
                    @ExpYear,
                    @ModifiedDate
                )";
            e.CreditCardId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCreditCard(this IDbConnection conn, CreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[CreditCard] SET
                    [CardNumber] = @CardNumber,
                    [CardType] = @CardType,
                    [ExpMonth] = @ExpMonth,
                    [ExpYear] = @ExpYear,
                    [ModifiedDate] = @ModifiedDate
                WHERE
                    [CreditCardID] = @CreditCardId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCreditCard_by_CardNumber(this IDbConnection conn, CreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[CreditCard] SET
                    [CardNumber] = @CardNumber,
                    [CardType] = @CardType,
                    [ExpMonth] = @ExpMonth,
                    [ExpYear] = @ExpYear,
                    [ModifiedDate] = @ModifiedDate
                WHERE
                    [CardNumber] = @CardNumber";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteCreditCard(this IDbConnection conn, CreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[CreditCard]
                WHERE
                    [CreditCardID] = @CreditCardId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteCreditCard(this IDbConnection conn, int CreditCardId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[CreditCard]
                WHERE
                    [CreditCardID] = @CreditCardId";
            int deleted = conn.Execute(cmd, new { CreditCardId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion CreditCard

        #region Culture
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCulture(this IDbConnection conn, Culture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CultureId == null)
                conn.InsertCulture(e, transaction, commandTimeout);
            else
                conn.UpdateCulture(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCulture_by_Name(this IDbConnection conn, Culture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertCulture(e, transaction, commandTimeout);
            else
                conn.UpdateCulture_by_Name(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertCulture(this IDbConnection conn, Culture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[Culture]
                (
                    [CultureID],
                    [ModifiedDate],
                    [Name]
                )
                VALUES
                (
                    @CultureId,
                    @ModifiedDate,
                    @Name
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCulture(this IDbConnection conn, Culture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[Culture] SET
                    [CultureID] = @CultureId,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [CultureID] = @CultureId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCulture_by_Name(this IDbConnection conn, Culture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[Culture] SET
                    [CultureID] = @CultureId,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteCulture(this IDbConnection conn, Culture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[Culture]
                WHERE
                    [CultureID] = @CultureId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteCulture(this IDbConnection conn, string CultureId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[Culture]
                WHERE
                    [CultureID] = @CultureId";
            int deleted = conn.Execute(cmd, new { CultureId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Culture

        #region Currency
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCurrency(this IDbConnection conn, Currency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CurrencyCode == null)
                conn.InsertCurrency(e, transaction, commandTimeout);
            else
                conn.UpdateCurrency(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCurrency_by_Name(this IDbConnection conn, Currency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertCurrency(e, transaction, commandTimeout);
            else
                conn.UpdateCurrency_by_Name(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertCurrency(this IDbConnection conn, Currency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[Currency]
                (
                    [CurrencyCode],
                    [ModifiedDate],
                    [Name]
                )
                VALUES
                (
                    @CurrencyCode,
                    @ModifiedDate,
                    @Name
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCurrency(this IDbConnection conn, Currency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[Currency] SET
                    [CurrencyCode] = @CurrencyCode,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [CurrencyCode] = @CurrencyCode";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCurrency_by_Name(this IDbConnection conn, Currency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[Currency] SET
                    [CurrencyCode] = @CurrencyCode,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteCurrency(this IDbConnection conn, Currency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[Currency]
                WHERE
                    [CurrencyCode] = @CurrencyCode";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteCurrency(this IDbConnection conn, string CurrencyCode, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[Currency]
                WHERE
                    [CurrencyCode] = @CurrencyCode";
            int deleted = conn.Execute(cmd, new { CurrencyCode }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Currency

        #region CurrencyRate
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCurrencyRate(this IDbConnection conn, CurrencyRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CurrencyRateId == default(int))
                conn.InsertCurrencyRate(e, transaction, commandTimeout);
            else
                conn.UpdateCurrencyRate(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCurrencyRate_by_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode(this IDbConnection conn, CurrencyRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CurrencyRateDate == default(DateTime) && e.FromCurrencyCode == null && e.ToCurrencyCode == null)
                conn.InsertCurrencyRate(e, transaction, commandTimeout);
            else
                conn.UpdateCurrencyRate_by_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertCurrencyRate(this IDbConnection conn, CurrencyRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[CurrencyRate]
                (
                    [AverageRate],
                    [CurrencyRateDate],
                    [EndOfDayRate],
                    [FromCurrencyCode],
                    [ModifiedDate],
                    [ToCurrencyCode]
                )
                VALUES
                (
                    @AverageRate,
                    @CurrencyRateDate,
                    @EndOfDayRate,
                    @FromCurrencyCode,
                    @ModifiedDate,
                    @ToCurrencyCode
                )";
            e.CurrencyRateId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCurrencyRate(this IDbConnection conn, CurrencyRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[CurrencyRate] SET
                    [AverageRate] = @AverageRate,
                    [CurrencyRateDate] = @CurrencyRateDate,
                    [EndOfDayRate] = @EndOfDayRate,
                    [FromCurrencyCode] = @FromCurrencyCode,
                    [ModifiedDate] = @ModifiedDate,
                    [ToCurrencyCode] = @ToCurrencyCode
                WHERE
                    [CurrencyRateID] = @CurrencyRateId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCurrencyRate_by_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode(this IDbConnection conn, CurrencyRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[CurrencyRate] SET
                    [AverageRate] = @AverageRate,
                    [CurrencyRateDate] = @CurrencyRateDate,
                    [EndOfDayRate] = @EndOfDayRate,
                    [FromCurrencyCode] = @FromCurrencyCode,
                    [ModifiedDate] = @ModifiedDate,
                    [ToCurrencyCode] = @ToCurrencyCode
                WHERE
                    [CurrencyRateDate] = @CurrencyRateDate AND
                    [FromCurrencyCode] = @FromCurrencyCode AND
                    [ToCurrencyCode] = @ToCurrencyCode";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteCurrencyRate(this IDbConnection conn, CurrencyRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[CurrencyRate]
                WHERE
                    [CurrencyRateID] = @CurrencyRateId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteCurrencyRate(this IDbConnection conn, int CurrencyRateId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[CurrencyRate]
                WHERE
                    [CurrencyRateID] = @CurrencyRateId";
            int deleted = conn.Execute(cmd, new { CurrencyRateId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion CurrencyRate

        #region Customer
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCustomer(this IDbConnection conn, Customer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CustomerId == default(int))
                conn.InsertCustomer(e, transaction, commandTimeout);
            else
                conn.UpdateCustomer(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCustomer_by_AccountNumber(this IDbConnection conn, Customer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.AccountNumber == null)
                conn.InsertCustomer(e, transaction, commandTimeout);
            else
                conn.UpdateCustomer_by_AccountNumber(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveCustomer_by_rowguid(this IDbConnection conn, Customer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertCustomer(e, transaction, commandTimeout);
            else
                conn.UpdateCustomer_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertCustomer(this IDbConnection conn, Customer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[Customer]
                (
                    [ModifiedDate],
                    [PersonID],
                    [StoreID],
                    [TerritoryID]
                )
                VALUES
                (
                    @ModifiedDate,
                    @PersonId,
                    @StoreId,
                    @TerritoryId
                )";
            e.CustomerId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCustomer(this IDbConnection conn, Customer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[Customer] SET
                    [ModifiedDate] = @ModifiedDate,
                    [PersonID] = @PersonId,
                    [StoreID] = @StoreId,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [CustomerID] = @CustomerId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCustomer_by_AccountNumber(this IDbConnection conn, Customer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[Customer] SET
                    [ModifiedDate] = @ModifiedDate,
                    [PersonID] = @PersonId,
                    [StoreID] = @StoreId,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [AccountNumber] = @AccountNumber";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateCustomer_by_rowguid(this IDbConnection conn, Customer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[Customer] SET
                    [ModifiedDate] = @ModifiedDate,
                    [PersonID] = @PersonId,
                    [StoreID] = @StoreId,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteCustomer(this IDbConnection conn, Customer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[Customer]
                WHERE
                    [CustomerID] = @CustomerId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteCustomer(this IDbConnection conn, int CustomerId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[Customer]
                WHERE
                    [CustomerID] = @CustomerId";
            int deleted = conn.Execute(cmd, new { CustomerId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Customer

        #region DatabaseLog
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveDatabaseLog(this IDbConnection conn, DatabaseLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.DatabaseLogId == default(int))
                conn.InsertDatabaseLog(e, transaction, commandTimeout);
            else
                conn.UpdateDatabaseLog(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertDatabaseLog(this IDbConnection conn, DatabaseLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [DatabaseLog]
                (
                    [DatabaseUser],
                    [Event],
                    [Object],
                    [PostTime],
                    [Schema],
                    [TSQL],
                    [XmlEvent]
                )
                VALUES
                (
                    @DatabaseUser,
                    @Event,
                    @Object,
                    @PostTime,
                    @Schema,
                    @Tsql,
                    @XmlEvent
                )";
            e.DatabaseLogId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateDatabaseLog(this IDbConnection conn, DatabaseLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [DatabaseLog] SET
                    [DatabaseUser] = @DatabaseUser,
                    [Event] = @Event,
                    [Object] = @Object,
                    [PostTime] = @PostTime,
                    [Schema] = @Schema,
                    [TSQL] = @Tsql,
                    [XmlEvent] = @XmlEvent
                WHERE
                    [DatabaseLogID] = @DatabaseLogId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteDatabaseLog(this IDbConnection conn, DatabaseLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [DatabaseLog]
                WHERE
                    [DatabaseLogID] = @DatabaseLogId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteDatabaseLog(this IDbConnection conn, int DatabaseLogId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [DatabaseLog]
                WHERE
                    [DatabaseLogID] = @DatabaseLogId";
            int deleted = conn.Execute(cmd, new { DatabaseLogId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion DatabaseLog

        #region Department
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveDepartment(this IDbConnection conn, Department e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.DepartmentId == default(short))
                conn.InsertDepartment(e, transaction, commandTimeout);
            else
                conn.UpdateDepartment(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveDepartment_by_Name(this IDbConnection conn, Department e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertDepartment(e, transaction, commandTimeout);
            else
                conn.UpdateDepartment_by_Name(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertDepartment(this IDbConnection conn, Department e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [HumanResources].[Department]
                (
                    [GroupName],
                    [ModifiedDate],
                    [Name]
                )
                VALUES
                (
                    @GroupName,
                    @ModifiedDate,
                    @Name
                )";
            e.DepartmentId = conn.Query<short>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateDepartment(this IDbConnection conn, Department e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [HumanResources].[Department] SET
                    [GroupName] = @GroupName,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [DepartmentID] = @DepartmentId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateDepartment_by_Name(this IDbConnection conn, Department e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [HumanResources].[Department] SET
                    [GroupName] = @GroupName,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteDepartment(this IDbConnection conn, Department e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [HumanResources].[Department]
                WHERE
                    [DepartmentID] = @DepartmentId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteDepartment(this IDbConnection conn, short DepartmentId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [HumanResources].[Department]
                WHERE
                    [DepartmentID] = @DepartmentId";
            int deleted = conn.Execute(cmd, new { DepartmentId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Department

        #region Document

        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertDocument(this IDbConnection conn, Document e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[Document]
                (
                    [ChangeNumber],
                    [Document],
                    [DocumentSummary],
                    [FileExtension],
                    [FileName],
                    [FolderFlag],
                    [ModifiedDate],
                    [Owner],
                    [Revision],
                    [Status],
                    [Title]
                )
                VALUES
                (
                    @ChangeNumber,
                    @Document1,
                    @DocumentSummary,
                    @FileExtension,
                    @FileName,
                    @FolderFlag,
                    @ModifiedDate,
                    @Owner,
                    @Revision,
                    @Status,
                    @Title
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }


        #endregion Document

        #region EmailAddress
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveEmailAddress(this IDbConnection conn, EmailAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.EmailAddressId == default(int))
                conn.InsertEmailAddress(e, transaction, commandTimeout);
            else
                conn.UpdateEmailAddress(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertEmailAddress(this IDbConnection conn, EmailAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Person].[EmailAddress]
                (
                    [BusinessEntityID],
                    [EmailAddress],
                    [ModifiedDate]
                )
                VALUES
                (
                    @BusinessEntityId,
                    @EmailAddress1,
                    @ModifiedDate
                )";
            e.EmailAddressId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateEmailAddress(this IDbConnection conn, EmailAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[EmailAddress] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [EmailAddress] = @EmailAddress1,
                    [ModifiedDate] = @ModifiedDate
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [EmailAddressID] = @EmailAddressId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteEmailAddress(this IDbConnection conn, EmailAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[EmailAddress]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [EmailAddressID] = @EmailAddressId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteEmailAddress(this IDbConnection conn, int BusinessEntityId, int EmailAddressId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[EmailAddress]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [EmailAddressID] = @EmailAddressId";
            int deleted = conn.Execute(cmd, new { BusinessEntityId, EmailAddressId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion EmailAddress

        #region Employee
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveEmployee(this IDbConnection conn, Employee e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                conn.InsertEmployee(e, transaction, commandTimeout);
            else
                conn.UpdateEmployee(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveEmployee_by_LoginID(this IDbConnection conn, Employee e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.LoginId == null)
                conn.InsertEmployee(e, transaction, commandTimeout);
            else
                conn.UpdateEmployee_by_LoginID(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveEmployee_by_NationalIDNumber(this IDbConnection conn, Employee e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.NationalIdNumber == null)
                conn.InsertEmployee(e, transaction, commandTimeout);
            else
                conn.UpdateEmployee_by_NationalIDNumber(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveEmployee_by_rowguid(this IDbConnection conn, Employee e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertEmployee(e, transaction, commandTimeout);
            else
                conn.UpdateEmployee_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertEmployee(this IDbConnection conn, Employee e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [HumanResources].[Employee]
                (
                    [BirthDate],
                    [BusinessEntityID],
                    [CurrentFlag],
                    [Gender],
                    [HireDate],
                    [JobTitle],
                    [LoginID],
                    [MaritalStatus],
                    [ModifiedDate],
                    [NationalIDNumber],
                    [SalariedFlag],
                    [SickLeaveHours],
                    [VacationHours]
                )
                VALUES
                (
                    @BirthDate,
                    @BusinessEntityId,
                    @CurrentFlag,
                    @Gender,
                    @HireDate,
                    @JobTitle,
                    @LoginId,
                    @MaritalStatus,
                    @ModifiedDate,
                    @NationalIdNumber,
                    @SalariedFlag,
                    @SickLeaveHours,
                    @VacationHours
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateEmployee(this IDbConnection conn, Employee e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [HumanResources].[Employee] SET
                    [BirthDate] = @BirthDate,
                    [BusinessEntityID] = @BusinessEntityId,
                    [CurrentFlag] = @CurrentFlag,
                    [Gender] = @Gender,
                    [HireDate] = @HireDate,
                    [JobTitle] = @JobTitle,
                    [LoginID] = @LoginId,
                    [MaritalStatus] = @MaritalStatus,
                    [ModifiedDate] = @ModifiedDate,
                    [NationalIDNumber] = @NationalIdNumber,
                    [SalariedFlag] = @SalariedFlag,
                    [SickLeaveHours] = @SickLeaveHours,
                    [VacationHours] = @VacationHours
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateEmployee_by_LoginID(this IDbConnection conn, Employee e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [HumanResources].[Employee] SET
                    [BirthDate] = @BirthDate,
                    [BusinessEntityID] = @BusinessEntityId,
                    [CurrentFlag] = @CurrentFlag,
                    [Gender] = @Gender,
                    [HireDate] = @HireDate,
                    [JobTitle] = @JobTitle,
                    [LoginID] = @LoginId,
                    [MaritalStatus] = @MaritalStatus,
                    [ModifiedDate] = @ModifiedDate,
                    [NationalIDNumber] = @NationalIdNumber,
                    [SalariedFlag] = @SalariedFlag,
                    [SickLeaveHours] = @SickLeaveHours,
                    [VacationHours] = @VacationHours
                WHERE
                    [LoginID] = @LoginId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateEmployee_by_NationalIDNumber(this IDbConnection conn, Employee e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [HumanResources].[Employee] SET
                    [BirthDate] = @BirthDate,
                    [BusinessEntityID] = @BusinessEntityId,
                    [CurrentFlag] = @CurrentFlag,
                    [Gender] = @Gender,
                    [HireDate] = @HireDate,
                    [JobTitle] = @JobTitle,
                    [LoginID] = @LoginId,
                    [MaritalStatus] = @MaritalStatus,
                    [ModifiedDate] = @ModifiedDate,
                    [NationalIDNumber] = @NationalIdNumber,
                    [SalariedFlag] = @SalariedFlag,
                    [SickLeaveHours] = @SickLeaveHours,
                    [VacationHours] = @VacationHours
                WHERE
                    [NationalIDNumber] = @NationalIdNumber";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateEmployee_by_rowguid(this IDbConnection conn, Employee e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [HumanResources].[Employee] SET
                    [BirthDate] = @BirthDate,
                    [BusinessEntityID] = @BusinessEntityId,
                    [CurrentFlag] = @CurrentFlag,
                    [Gender] = @Gender,
                    [HireDate] = @HireDate,
                    [JobTitle] = @JobTitle,
                    [LoginID] = @LoginId,
                    [MaritalStatus] = @MaritalStatus,
                    [ModifiedDate] = @ModifiedDate,
                    [NationalIDNumber] = @NationalIdNumber,
                    [SalariedFlag] = @SalariedFlag,
                    [SickLeaveHours] = @SickLeaveHours,
                    [VacationHours] = @VacationHours
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteEmployee(this IDbConnection conn, Employee e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [HumanResources].[Employee]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteEmployee(this IDbConnection conn, int BusinessEntityId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [HumanResources].[Employee]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, new { BusinessEntityId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Employee

        #region EmployeeDepartmentHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveEmployeeDepartmentHistory(this IDbConnection conn, EmployeeDepartmentHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.DepartmentId == default(short) && e.ShiftId == default(byte) && e.StartDate == default(DateTime))
                conn.InsertEmployeeDepartmentHistory(e, transaction, commandTimeout);
            else
                conn.UpdateEmployeeDepartmentHistory(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertEmployeeDepartmentHistory(this IDbConnection conn, EmployeeDepartmentHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [HumanResources].[EmployeeDepartmentHistory]
                (
                    [BusinessEntityID],
                    [DepartmentID],
                    [EndDate],
                    [ModifiedDate],
                    [ShiftID],
                    [StartDate]
                )
                VALUES
                (
                    @BusinessEntityId,
                    @DepartmentId,
                    @EndDate,
                    @ModifiedDate,
                    @ShiftId,
                    @StartDate
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateEmployeeDepartmentHistory(this IDbConnection conn, EmployeeDepartmentHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [HumanResources].[EmployeeDepartmentHistory] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [DepartmentID] = @DepartmentId,
                    [EndDate] = @EndDate,
                    [ModifiedDate] = @ModifiedDate,
                    [ShiftID] = @ShiftId,
                    [StartDate] = @StartDate
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [DepartmentID] = @DepartmentId AND
                    [ShiftID] = @ShiftId AND
                    [StartDate] = @StartDate";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteEmployeeDepartmentHistory(this IDbConnection conn, EmployeeDepartmentHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [HumanResources].[EmployeeDepartmentHistory]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [DepartmentID] = @DepartmentId AND
                    [ShiftID] = @ShiftId AND
                    [StartDate] = @StartDate";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteEmployeeDepartmentHistory(this IDbConnection conn, int BusinessEntityId, short DepartmentId, byte ShiftId, DateTime StartDate, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [HumanResources].[EmployeeDepartmentHistory]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [DepartmentID] = @DepartmentId AND
                    [ShiftID] = @ShiftId AND
                    [StartDate] = @StartDate";
            int deleted = conn.Execute(cmd, new { BusinessEntityId, DepartmentId, ShiftId, StartDate }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion EmployeeDepartmentHistory

        #region EmployeePayHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveEmployeePayHistory(this IDbConnection conn, EmployeePayHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.RateChangeDate == default(DateTime))
                conn.InsertEmployeePayHistory(e, transaction, commandTimeout);
            else
                conn.UpdateEmployeePayHistory(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertEmployeePayHistory(this IDbConnection conn, EmployeePayHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [HumanResources].[EmployeePayHistory]
                (
                    [BusinessEntityID],
                    [ModifiedDate],
                    [PayFrequency],
                    [Rate],
                    [RateChangeDate]
                )
                VALUES
                (
                    @BusinessEntityId,
                    @ModifiedDate,
                    @PayFrequency,
                    @Rate,
                    @RateChangeDate
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateEmployeePayHistory(this IDbConnection conn, EmployeePayHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [HumanResources].[EmployeePayHistory] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [ModifiedDate] = @ModifiedDate,
                    [PayFrequency] = @PayFrequency,
                    [Rate] = @Rate,
                    [RateChangeDate] = @RateChangeDate
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [RateChangeDate] = @RateChangeDate";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteEmployeePayHistory(this IDbConnection conn, EmployeePayHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [HumanResources].[EmployeePayHistory]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [RateChangeDate] = @RateChangeDate";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteEmployeePayHistory(this IDbConnection conn, int BusinessEntityId, DateTime RateChangeDate, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [HumanResources].[EmployeePayHistory]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [RateChangeDate] = @RateChangeDate";
            int deleted = conn.Execute(cmd, new { BusinessEntityId, RateChangeDate }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion EmployeePayHistory

        #region ErrorLog
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveErrorLog(this IDbConnection conn, ErrorLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ErrorLogId == default(int))
                conn.InsertErrorLog(e, transaction, commandTimeout);
            else
                conn.UpdateErrorLog(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertErrorLog(this IDbConnection conn, ErrorLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [ErrorLog]
                (
                    [ErrorLine],
                    [ErrorMessage],
                    [ErrorNumber],
                    [ErrorProcedure],
                    [ErrorSeverity],
                    [ErrorState],
                    [ErrorTime],
                    [UserName]
                )
                VALUES
                (
                    @ErrorLine,
                    @ErrorMessage,
                    @ErrorNumber,
                    @ErrorProcedure,
                    @ErrorSeverity,
                    @ErrorState,
                    @ErrorTime,
                    @UserName
                )";
            e.ErrorLogId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateErrorLog(this IDbConnection conn, ErrorLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [ErrorLog] SET
                    [ErrorLine] = @ErrorLine,
                    [ErrorMessage] = @ErrorMessage,
                    [ErrorNumber] = @ErrorNumber,
                    [ErrorProcedure] = @ErrorProcedure,
                    [ErrorSeverity] = @ErrorSeverity,
                    [ErrorState] = @ErrorState,
                    [ErrorTime] = @ErrorTime,
                    [UserName] = @UserName
                WHERE
                    [ErrorLogID] = @ErrorLogId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteErrorLog(this IDbConnection conn, ErrorLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [ErrorLog]
                WHERE
                    [ErrorLogID] = @ErrorLogId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteErrorLog(this IDbConnection conn, int ErrorLogId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [ErrorLog]
                WHERE
                    [ErrorLogID] = @ErrorLogId";
            int deleted = conn.Execute(cmd, new { ErrorLogId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ErrorLog

        #region Illustration
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveIllustration(this IDbConnection conn, Illustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.IllustrationId == default(int))
                conn.InsertIllustration(e, transaction, commandTimeout);
            else
                conn.UpdateIllustration(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertIllustration(this IDbConnection conn, Illustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[Illustration]
                (
                    [Diagram],
                    [ModifiedDate]
                )
                VALUES
                (
                    @Diagram,
                    @ModifiedDate
                )";
            e.IllustrationId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateIllustration(this IDbConnection conn, Illustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[Illustration] SET
                    [Diagram] = @Diagram,
                    [ModifiedDate] = @ModifiedDate
                WHERE
                    [IllustrationID] = @IllustrationId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteIllustration(this IDbConnection conn, Illustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[Illustration]
                WHERE
                    [IllustrationID] = @IllustrationId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteIllustration(this IDbConnection conn, int IllustrationId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[Illustration]
                WHERE
                    [IllustrationID] = @IllustrationId";
            int deleted = conn.Execute(cmd, new { IllustrationId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Illustration

        #region JobCandidate
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveJobCandidate(this IDbConnection conn, JobCandidate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.JobCandidateId == default(int))
                conn.InsertJobCandidate(e, transaction, commandTimeout);
            else
                conn.UpdateJobCandidate(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertJobCandidate(this IDbConnection conn, JobCandidate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [HumanResources].[JobCandidate]
                (
                    [BusinessEntityID],
                    [ModifiedDate],
                    [Resume]
                )
                VALUES
                (
                    @BusinessEntityId,
                    @ModifiedDate,
                    @Resume
                )";
            e.JobCandidateId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateJobCandidate(this IDbConnection conn, JobCandidate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [HumanResources].[JobCandidate] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [ModifiedDate] = @ModifiedDate,
                    [Resume] = @Resume
                WHERE
                    [JobCandidateID] = @JobCandidateId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteJobCandidate(this IDbConnection conn, JobCandidate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [HumanResources].[JobCandidate]
                WHERE
                    [JobCandidateID] = @JobCandidateId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteJobCandidate(this IDbConnection conn, int JobCandidateId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [HumanResources].[JobCandidate]
                WHERE
                    [JobCandidateID] = @JobCandidateId";
            int deleted = conn.Execute(cmd, new { JobCandidateId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion JobCandidate

        #region Location
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveLocation(this IDbConnection conn, Location e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.LocationId == default(short))
                conn.InsertLocation(e, transaction, commandTimeout);
            else
                conn.UpdateLocation(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveLocation_by_Name(this IDbConnection conn, Location e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertLocation(e, transaction, commandTimeout);
            else
                conn.UpdateLocation_by_Name(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertLocation(this IDbConnection conn, Location e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[Location]
                (
                    [Availability],
                    [CostRate],
                    [ModifiedDate],
                    [Name]
                )
                VALUES
                (
                    @Availability,
                    @CostRate,
                    @ModifiedDate,
                    @Name
                )";
            e.LocationId = conn.Query<short>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateLocation(this IDbConnection conn, Location e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[Location] SET
                    [Availability] = @Availability,
                    [CostRate] = @CostRate,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [LocationID] = @LocationId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateLocation_by_Name(this IDbConnection conn, Location e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[Location] SET
                    [Availability] = @Availability,
                    [CostRate] = @CostRate,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteLocation(this IDbConnection conn, Location e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[Location]
                WHERE
                    [LocationID] = @LocationId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteLocation(this IDbConnection conn, short LocationId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[Location]
                WHERE
                    [LocationID] = @LocationId";
            int deleted = conn.Execute(cmd, new { LocationId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Location

        #region Password
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SavePassword(this IDbConnection conn, Password e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                conn.InsertPassword(e, transaction, commandTimeout);
            else
                conn.UpdatePassword(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertPassword(this IDbConnection conn, Password e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Person].[Password]
                (
                    [BusinessEntityID],
                    [ModifiedDate],
                    [PasswordHash],
                    [PasswordSalt]
                )
                VALUES
                (
                    @BusinessEntityId,
                    @ModifiedDate,
                    @PasswordHash,
                    @PasswordSalt
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdatePassword(this IDbConnection conn, Password e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[Password] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [ModifiedDate] = @ModifiedDate,
                    [PasswordHash] = @PasswordHash,
                    [PasswordSalt] = @PasswordSalt
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeletePassword(this IDbConnection conn, Password e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[Password]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeletePassword(this IDbConnection conn, int BusinessEntityId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[Password]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, new { BusinessEntityId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Password

        #region Person
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SavePerson(this IDbConnection conn, Person e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                conn.InsertPerson(e, transaction, commandTimeout);
            else
                conn.UpdatePerson(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SavePerson_by_rowguid(this IDbConnection conn, Person e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertPerson(e, transaction, commandTimeout);
            else
                conn.UpdatePerson_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertPerson(this IDbConnection conn, Person e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Person].[Person]
                (
                    [AdditionalContactInfo],
                    [BusinessEntityID],
                    [Demographics],
                    [EmailPromotion],
                    [FirstName],
                    [LastName],
                    [MiddleName],
                    [ModifiedDate],
                    [NameStyle],
                    [PersonType],
                    [Suffix],
                    [Title]
                )
                VALUES
                (
                    @AdditionalContactInfo,
                    @BusinessEntityId,
                    @Demographics,
                    @EmailPromotion,
                    @FirstName,
                    @LastName,
                    @MiddleName,
                    @ModifiedDate,
                    @NameStyle,
                    @PersonType,
                    @Suffix,
                    @Title
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdatePerson(this IDbConnection conn, Person e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[Person] SET
                    [AdditionalContactInfo] = @AdditionalContactInfo,
                    [BusinessEntityID] = @BusinessEntityId,
                    [Demographics] = @Demographics,
                    [EmailPromotion] = @EmailPromotion,
                    [FirstName] = @FirstName,
                    [LastName] = @LastName,
                    [MiddleName] = @MiddleName,
                    [ModifiedDate] = @ModifiedDate,
                    [NameStyle] = @NameStyle,
                    [PersonType] = @PersonType,
                    [Suffix] = @Suffix,
                    [Title] = @Title
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdatePerson_by_rowguid(this IDbConnection conn, Person e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[Person] SET
                    [AdditionalContactInfo] = @AdditionalContactInfo,
                    [BusinessEntityID] = @BusinessEntityId,
                    [Demographics] = @Demographics,
                    [EmailPromotion] = @EmailPromotion,
                    [FirstName] = @FirstName,
                    [LastName] = @LastName,
                    [MiddleName] = @MiddleName,
                    [ModifiedDate] = @ModifiedDate,
                    [NameStyle] = @NameStyle,
                    [PersonType] = @PersonType,
                    [Suffix] = @Suffix,
                    [Title] = @Title
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeletePerson(this IDbConnection conn, Person e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[Person]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeletePerson(this IDbConnection conn, int BusinessEntityId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[Person]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, new { BusinessEntityId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Person

        #region PersonCreditCard
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SavePersonCreditCard(this IDbConnection conn, PersonCreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.CreditCardId == default(int))
                conn.InsertPersonCreditCard(e, transaction, commandTimeout);
            else
                conn.UpdatePersonCreditCard(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertPersonCreditCard(this IDbConnection conn, PersonCreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[PersonCreditCard]
                (
                    [BusinessEntityID],
                    [CreditCardID],
                    [ModifiedDate]
                )
                VALUES
                (
                    @BusinessEntityId,
                    @CreditCardId,
                    @ModifiedDate
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdatePersonCreditCard(this IDbConnection conn, PersonCreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[PersonCreditCard] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [CreditCardID] = @CreditCardId,
                    [ModifiedDate] = @ModifiedDate
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [CreditCardID] = @CreditCardId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeletePersonCreditCard(this IDbConnection conn, PersonCreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[PersonCreditCard]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [CreditCardID] = @CreditCardId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeletePersonCreditCard(this IDbConnection conn, int BusinessEntityId, int CreditCardId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[PersonCreditCard]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [CreditCardID] = @CreditCardId";
            int deleted = conn.Execute(cmd, new { BusinessEntityId, CreditCardId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion PersonCreditCard

        #region PersonPhone
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SavePersonPhone(this IDbConnection conn, PersonPhone e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.PhoneNumber == null && e.PhoneNumberTypeId == default(int))
                conn.InsertPersonPhone(e, transaction, commandTimeout);
            else
                conn.UpdatePersonPhone(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertPersonPhone(this IDbConnection conn, PersonPhone e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Person].[PersonPhone]
                (
                    [BusinessEntityID],
                    [ModifiedDate],
                    [PhoneNumber],
                    [PhoneNumberTypeID]
                )
                VALUES
                (
                    @BusinessEntityId,
                    @ModifiedDate,
                    @PhoneNumber,
                    @PhoneNumberTypeId
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdatePersonPhone(this IDbConnection conn, PersonPhone e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[PersonPhone] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [ModifiedDate] = @ModifiedDate,
                    [PhoneNumber] = @PhoneNumber,
                    [PhoneNumberTypeID] = @PhoneNumberTypeId
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [PhoneNumber] = @PhoneNumber AND
                    [PhoneNumberTypeID] = @PhoneNumberTypeId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeletePersonPhone(this IDbConnection conn, PersonPhone e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[PersonPhone]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [PhoneNumber] = @PhoneNumber AND
                    [PhoneNumberTypeID] = @PhoneNumberTypeId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeletePersonPhone(this IDbConnection conn, int BusinessEntityId, string PhoneNumber, int PhoneNumberTypeId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[PersonPhone]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [PhoneNumber] = @PhoneNumber AND
                    [PhoneNumberTypeID] = @PhoneNumberTypeId";
            int deleted = conn.Execute(cmd, new { BusinessEntityId, PhoneNumber, PhoneNumberTypeId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion PersonPhone

        #region PhoneNumberType
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SavePhoneNumberType(this IDbConnection conn, PhoneNumberType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.PhoneNumberTypeId == default(int))
                conn.InsertPhoneNumberType(e, transaction, commandTimeout);
            else
                conn.UpdatePhoneNumberType(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertPhoneNumberType(this IDbConnection conn, PhoneNumberType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Person].[PhoneNumberType]
                (
                    [ModifiedDate],
                    [Name]
                )
                VALUES
                (
                    @ModifiedDate,
                    @Name
                )";
            e.PhoneNumberTypeId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdatePhoneNumberType(this IDbConnection conn, PhoneNumberType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[PhoneNumberType] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [PhoneNumberTypeID] = @PhoneNumberTypeId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeletePhoneNumberType(this IDbConnection conn, PhoneNumberType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[PhoneNumberType]
                WHERE
                    [PhoneNumberTypeID] = @PhoneNumberTypeId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeletePhoneNumberType(this IDbConnection conn, int PhoneNumberTypeId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[PhoneNumberType]
                WHERE
                    [PhoneNumberTypeID] = @PhoneNumberTypeId";
            int deleted = conn.Execute(cmd, new { PhoneNumberTypeId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion PhoneNumberType

        #region Product
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProduct(this IDbConnection conn, Product e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int))
                conn.InsertProduct(e, transaction, commandTimeout);
            else
                conn.UpdateProduct(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProduct_by_Name(this IDbConnection conn, Product e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertProduct(e, transaction, commandTimeout);
            else
                conn.UpdateProduct_by_Name(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProduct_by_ProductNumber(this IDbConnection conn, Product e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductNumber == null)
                conn.InsertProduct(e, transaction, commandTimeout);
            else
                conn.UpdateProduct_by_ProductNumber(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProduct_by_rowguid(this IDbConnection conn, Product e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertProduct(e, transaction, commandTimeout);
            else
                conn.UpdateProduct_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProduct(this IDbConnection conn, Product e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[Product]
                (
                    [Class],
                    [Color],
                    [DaysToManufacture],
                    [DiscontinuedDate],
                    [FinishedGoodsFlag],
                    [ListPrice],
                    [MakeFlag],
                    [ModifiedDate],
                    [Name],
                    [ProductLine],
                    [ProductModelID],
                    [ProductNumber],
                    [ProductSubcategoryID],
                    [ReorderPoint],
                    [SafetyStockLevel],
                    [SellEndDate],
                    [SellStartDate],
                    [Size],
                    [SizeUnitMeasureCode],
                    [StandardCost],
                    [Style],
                    [Weight],
                    [WeightUnitMeasureCode]
                )
                VALUES
                (
                    @Class,
                    @Color,
                    @DaysToManufacture,
                    @DiscontinuedDate,
                    @FinishedGoodsFlag,
                    @ListPrice,
                    @MakeFlag,
                    @ModifiedDate,
                    @Name,
                    @ProductLine,
                    @ProductModelId,
                    @ProductNumber,
                    @ProductSubcategoryId,
                    @ReorderPoint,
                    @SafetyStockLevel,
                    @SellEndDate,
                    @SellStartDate,
                    @Size,
                    @SizeUnitMeasureCode,
                    @StandardCost,
                    @Style,
                    @Weight,
                    @WeightUnitMeasureCode
                )";
            e.ProductId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProduct(this IDbConnection conn, Product e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[Product] SET
                    [Class] = @Class,
                    [Color] = @Color,
                    [DaysToManufacture] = @DaysToManufacture,
                    [DiscontinuedDate] = @DiscontinuedDate,
                    [FinishedGoodsFlag] = @FinishedGoodsFlag,
                    [ListPrice] = @ListPrice,
                    [MakeFlag] = @MakeFlag,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [ProductLine] = @ProductLine,
                    [ProductModelID] = @ProductModelId,
                    [ProductNumber] = @ProductNumber,
                    [ProductSubcategoryID] = @ProductSubcategoryId,
                    [ReorderPoint] = @ReorderPoint,
                    [SafetyStockLevel] = @SafetyStockLevel,
                    [SellEndDate] = @SellEndDate,
                    [SellStartDate] = @SellStartDate,
                    [Size] = @Size,
                    [SizeUnitMeasureCode] = @SizeUnitMeasureCode,
                    [StandardCost] = @StandardCost,
                    [Style] = @Style,
                    [Weight] = @Weight,
                    [WeightUnitMeasureCode] = @WeightUnitMeasureCode
                WHERE
                    [ProductID] = @ProductId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProduct_by_Name(this IDbConnection conn, Product e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[Product] SET
                    [Class] = @Class,
                    [Color] = @Color,
                    [DaysToManufacture] = @DaysToManufacture,
                    [DiscontinuedDate] = @DiscontinuedDate,
                    [FinishedGoodsFlag] = @FinishedGoodsFlag,
                    [ListPrice] = @ListPrice,
                    [MakeFlag] = @MakeFlag,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [ProductLine] = @ProductLine,
                    [ProductModelID] = @ProductModelId,
                    [ProductNumber] = @ProductNumber,
                    [ProductSubcategoryID] = @ProductSubcategoryId,
                    [ReorderPoint] = @ReorderPoint,
                    [SafetyStockLevel] = @SafetyStockLevel,
                    [SellEndDate] = @SellEndDate,
                    [SellStartDate] = @SellStartDate,
                    [Size] = @Size,
                    [SizeUnitMeasureCode] = @SizeUnitMeasureCode,
                    [StandardCost] = @StandardCost,
                    [Style] = @Style,
                    [Weight] = @Weight,
                    [WeightUnitMeasureCode] = @WeightUnitMeasureCode
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProduct_by_ProductNumber(this IDbConnection conn, Product e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[Product] SET
                    [Class] = @Class,
                    [Color] = @Color,
                    [DaysToManufacture] = @DaysToManufacture,
                    [DiscontinuedDate] = @DiscontinuedDate,
                    [FinishedGoodsFlag] = @FinishedGoodsFlag,
                    [ListPrice] = @ListPrice,
                    [MakeFlag] = @MakeFlag,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [ProductLine] = @ProductLine,
                    [ProductModelID] = @ProductModelId,
                    [ProductNumber] = @ProductNumber,
                    [ProductSubcategoryID] = @ProductSubcategoryId,
                    [ReorderPoint] = @ReorderPoint,
                    [SafetyStockLevel] = @SafetyStockLevel,
                    [SellEndDate] = @SellEndDate,
                    [SellStartDate] = @SellStartDate,
                    [Size] = @Size,
                    [SizeUnitMeasureCode] = @SizeUnitMeasureCode,
                    [StandardCost] = @StandardCost,
                    [Style] = @Style,
                    [Weight] = @Weight,
                    [WeightUnitMeasureCode] = @WeightUnitMeasureCode
                WHERE
                    [ProductNumber] = @ProductNumber";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProduct_by_rowguid(this IDbConnection conn, Product e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[Product] SET
                    [Class] = @Class,
                    [Color] = @Color,
                    [DaysToManufacture] = @DaysToManufacture,
                    [DiscontinuedDate] = @DiscontinuedDate,
                    [FinishedGoodsFlag] = @FinishedGoodsFlag,
                    [ListPrice] = @ListPrice,
                    [MakeFlag] = @MakeFlag,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [ProductLine] = @ProductLine,
                    [ProductModelID] = @ProductModelId,
                    [ProductNumber] = @ProductNumber,
                    [ProductSubcategoryID] = @ProductSubcategoryId,
                    [ReorderPoint] = @ReorderPoint,
                    [SafetyStockLevel] = @SafetyStockLevel,
                    [SellEndDate] = @SellEndDate,
                    [SellStartDate] = @SellStartDate,
                    [Size] = @Size,
                    [SizeUnitMeasureCode] = @SizeUnitMeasureCode,
                    [StandardCost] = @StandardCost,
                    [Style] = @Style,
                    [Weight] = @Weight,
                    [WeightUnitMeasureCode] = @WeightUnitMeasureCode
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProduct(this IDbConnection conn, Product e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[Product]
                WHERE
                    [ProductID] = @ProductId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProduct(this IDbConnection conn, int ProductId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[Product]
                WHERE
                    [ProductID] = @ProductId";
            int deleted = conn.Execute(cmd, new { ProductId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Product

        #region ProductCategory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductCategory(this IDbConnection conn, ProductCategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductCategoryId == default(int))
                conn.InsertProductCategory(e, transaction, commandTimeout);
            else
                conn.UpdateProductCategory(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductCategory_by_Name(this IDbConnection conn, ProductCategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertProductCategory(e, transaction, commandTimeout);
            else
                conn.UpdateProductCategory_by_Name(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductCategory_by_rowguid(this IDbConnection conn, ProductCategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertProductCategory(e, transaction, commandTimeout);
            else
                conn.UpdateProductCategory_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductCategory(this IDbConnection conn, ProductCategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ProductCategory]
                (
                    [ModifiedDate],
                    [Name]
                )
                VALUES
                (
                    @ModifiedDate,
                    @Name
                )";
            e.ProductCategoryId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductCategory(this IDbConnection conn, ProductCategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductCategory] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [ProductCategoryID] = @ProductCategoryId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductCategory_by_Name(this IDbConnection conn, ProductCategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductCategory] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductCategory_by_rowguid(this IDbConnection conn, ProductCategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductCategory] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductCategory(this IDbConnection conn, ProductCategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductCategory]
                WHERE
                    [ProductCategoryID] = @ProductCategoryId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductCategory(this IDbConnection conn, int ProductCategoryId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductCategory]
                WHERE
                    [ProductCategoryID] = @ProductCategoryId";
            int deleted = conn.Execute(cmd, new { ProductCategoryId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductCategory

        #region ProductCostHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductCostHistory(this IDbConnection conn, ProductCostHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int) && e.StartDate == default(DateTime))
                conn.InsertProductCostHistory(e, transaction, commandTimeout);
            else
                conn.UpdateProductCostHistory(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductCostHistory(this IDbConnection conn, ProductCostHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ProductCostHistory]
                (
                    [EndDate],
                    [ModifiedDate],
                    [ProductID],
                    [StandardCost],
                    [StartDate]
                )
                VALUES
                (
                    @EndDate,
                    @ModifiedDate,
                    @ProductId,
                    @StandardCost,
                    @StartDate
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductCostHistory(this IDbConnection conn, ProductCostHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductCostHistory] SET
                    [EndDate] = @EndDate,
                    [ModifiedDate] = @ModifiedDate,
                    [ProductID] = @ProductId,
                    [StandardCost] = @StandardCost,
                    [StartDate] = @StartDate
                WHERE
                    [ProductID] = @ProductId AND
                    [StartDate] = @StartDate";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductCostHistory(this IDbConnection conn, ProductCostHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductCostHistory]
                WHERE
                    [ProductID] = @ProductId AND
                    [StartDate] = @StartDate";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductCostHistory(this IDbConnection conn, int ProductId, DateTime StartDate, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductCostHistory]
                WHERE
                    [ProductID] = @ProductId AND
                    [StartDate] = @StartDate";
            int deleted = conn.Execute(cmd, new { ProductId, StartDate }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductCostHistory

        #region ProductDescription
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductDescription(this IDbConnection conn, ProductDescription e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductDescriptionId == default(int))
                conn.InsertProductDescription(e, transaction, commandTimeout);
            else
                conn.UpdateProductDescription(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductDescription_by_rowguid(this IDbConnection conn, ProductDescription e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertProductDescription(e, transaction, commandTimeout);
            else
                conn.UpdateProductDescription_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductDescription(this IDbConnection conn, ProductDescription e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ProductDescription]
                (
                    [Description],
                    [ModifiedDate]
                )
                VALUES
                (
                    @Description,
                    @ModifiedDate
                )";
            e.ProductDescriptionId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductDescription(this IDbConnection conn, ProductDescription e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductDescription] SET
                    [Description] = @Description,
                    [ModifiedDate] = @ModifiedDate
                WHERE
                    [ProductDescriptionID] = @ProductDescriptionId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductDescription_by_rowguid(this IDbConnection conn, ProductDescription e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductDescription] SET
                    [Description] = @Description,
                    [ModifiedDate] = @ModifiedDate
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductDescription(this IDbConnection conn, ProductDescription e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductDescription]
                WHERE
                    [ProductDescriptionID] = @ProductDescriptionId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductDescription(this IDbConnection conn, int ProductDescriptionId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductDescription]
                WHERE
                    [ProductDescriptionID] = @ProductDescriptionId";
            int deleted = conn.Execute(cmd, new { ProductDescriptionId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductDescription

        #region ProductDocument
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductDocument(this IDbConnection conn, ProductDocument e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int))
                conn.InsertProductDocument(e, transaction, commandTimeout);
            else
                conn.UpdateProductDocument(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductDocument(this IDbConnection conn, ProductDocument e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ProductDocument]
                (
                    [ModifiedDate],
                    [ProductID]
                )
                VALUES
                (
                    @ModifiedDate,
                    @ProductId
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductDocument(this IDbConnection conn, ProductDocument e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductDocument] SET
                    [ModifiedDate] = @ModifiedDate,
                    [ProductID] = @ProductId
                WHERE
                    [ProductID] = @ProductId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductDocument(this IDbConnection conn, ProductDocument e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductDocument]
                WHERE
                    [ProductID] = @ProductId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductDocument(this IDbConnection conn, int ProductId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductDocument]
                WHERE
                    [ProductID] = @ProductId";
            int deleted = conn.Execute(cmd, new { ProductId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductDocument

        #region ProductInventory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductInventory(this IDbConnection conn, ProductInventory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int) && e.LocationId == default(short))
                conn.InsertProductInventory(e, transaction, commandTimeout);
            else
                conn.UpdateProductInventory(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductInventory(this IDbConnection conn, ProductInventory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ProductInventory]
                (
                    [Bin],
                    [LocationID],
                    [ModifiedDate],
                    [ProductID],
                    [Quantity],
                    [Shelf]
                )
                VALUES
                (
                    @Bin,
                    @LocationId,
                    @ModifiedDate,
                    @ProductId,
                    @Quantity,
                    @Shelf
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductInventory(this IDbConnection conn, ProductInventory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductInventory] SET
                    [Bin] = @Bin,
                    [LocationID] = @LocationId,
                    [ModifiedDate] = @ModifiedDate,
                    [ProductID] = @ProductId,
                    [Quantity] = @Quantity,
                    [Shelf] = @Shelf
                WHERE
                    [ProductID] = @ProductId AND
                    [LocationID] = @LocationId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductInventory(this IDbConnection conn, ProductInventory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductInventory]
                WHERE
                    [ProductID] = @ProductId AND
                    [LocationID] = @LocationId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductInventory(this IDbConnection conn, int ProductId, short LocationId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductInventory]
                WHERE
                    [ProductID] = @ProductId AND
                    [LocationID] = @LocationId";
            int deleted = conn.Execute(cmd, new { ProductId, LocationId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductInventory

        #region ProductListPriceHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductListPriceHistory(this IDbConnection conn, ProductListPriceHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int) && e.StartDate == default(DateTime))
                conn.InsertProductListPriceHistory(e, transaction, commandTimeout);
            else
                conn.UpdateProductListPriceHistory(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductListPriceHistory(this IDbConnection conn, ProductListPriceHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ProductListPriceHistory]
                (
                    [EndDate],
                    [ListPrice],
                    [ModifiedDate],
                    [ProductID],
                    [StartDate]
                )
                VALUES
                (
                    @EndDate,
                    @ListPrice,
                    @ModifiedDate,
                    @ProductId,
                    @StartDate
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductListPriceHistory(this IDbConnection conn, ProductListPriceHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductListPriceHistory] SET
                    [EndDate] = @EndDate,
                    [ListPrice] = @ListPrice,
                    [ModifiedDate] = @ModifiedDate,
                    [ProductID] = @ProductId,
                    [StartDate] = @StartDate
                WHERE
                    [ProductID] = @ProductId AND
                    [StartDate] = @StartDate";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductListPriceHistory(this IDbConnection conn, ProductListPriceHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductListPriceHistory]
                WHERE
                    [ProductID] = @ProductId AND
                    [StartDate] = @StartDate";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductListPriceHistory(this IDbConnection conn, int ProductId, DateTime StartDate, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductListPriceHistory]
                WHERE
                    [ProductID] = @ProductId AND
                    [StartDate] = @StartDate";
            int deleted = conn.Execute(cmd, new { ProductId, StartDate }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductListPriceHistory

        #region ProductModel
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductModel(this IDbConnection conn, ProductModel e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductModelId == default(int))
                conn.InsertProductModel(e, transaction, commandTimeout);
            else
                conn.UpdateProductModel(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductModel_by_Name(this IDbConnection conn, ProductModel e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertProductModel(e, transaction, commandTimeout);
            else
                conn.UpdateProductModel_by_Name(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductModel_by_rowguid(this IDbConnection conn, ProductModel e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertProductModel(e, transaction, commandTimeout);
            else
                conn.UpdateProductModel_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductModel(this IDbConnection conn, ProductModel e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ProductModel]
                (
                    [CatalogDescription],
                    [Instructions],
                    [ModifiedDate],
                    [Name]
                )
                VALUES
                (
                    @CatalogDescription,
                    @Instructions,
                    @ModifiedDate,
                    @Name
                )";
            e.ProductModelId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductModel(this IDbConnection conn, ProductModel e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductModel] SET
                    [CatalogDescription] = @CatalogDescription,
                    [Instructions] = @Instructions,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [ProductModelID] = @ProductModelId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductModel_by_Name(this IDbConnection conn, ProductModel e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductModel] SET
                    [CatalogDescription] = @CatalogDescription,
                    [Instructions] = @Instructions,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductModel_by_rowguid(this IDbConnection conn, ProductModel e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductModel] SET
                    [CatalogDescription] = @CatalogDescription,
                    [Instructions] = @Instructions,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductModel(this IDbConnection conn, ProductModel e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductModel]
                WHERE
                    [ProductModelID] = @ProductModelId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductModel(this IDbConnection conn, int ProductModelId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductModel]
                WHERE
                    [ProductModelID] = @ProductModelId";
            int deleted = conn.Execute(cmd, new { ProductModelId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductModel

        #region ProductModelIllustration
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductModelIllustration(this IDbConnection conn, ProductModelIllustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductModelId == default(int) && e.IllustrationId == default(int))
                conn.InsertProductModelIllustration(e, transaction, commandTimeout);
            else
                conn.UpdateProductModelIllustration(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductModelIllustration(this IDbConnection conn, ProductModelIllustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ProductModelIllustration]
                (
                    [IllustrationID],
                    [ModifiedDate],
                    [ProductModelID]
                )
                VALUES
                (
                    @IllustrationId,
                    @ModifiedDate,
                    @ProductModelId
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductModelIllustration(this IDbConnection conn, ProductModelIllustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductModelIllustration] SET
                    [IllustrationID] = @IllustrationId,
                    [ModifiedDate] = @ModifiedDate,
                    [ProductModelID] = @ProductModelId
                WHERE
                    [ProductModelID] = @ProductModelId AND
                    [IllustrationID] = @IllustrationId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductModelIllustration(this IDbConnection conn, ProductModelIllustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductModelIllustration]
                WHERE
                    [ProductModelID] = @ProductModelId AND
                    [IllustrationID] = @IllustrationId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductModelIllustration(this IDbConnection conn, int ProductModelId, int IllustrationId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductModelIllustration]
                WHERE
                    [ProductModelID] = @ProductModelId AND
                    [IllustrationID] = @IllustrationId";
            int deleted = conn.Execute(cmd, new { ProductModelId, IllustrationId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductModelIllustration

        #region ProductModelProductDescriptionCulture
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductModelProductDescriptionCulture(this IDbConnection conn, ProductModelProductDescriptionCulture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductModelId == default(int) && e.ProductDescriptionId == default(int) && e.CultureId == null)
                conn.InsertProductModelProductDescriptionCulture(e, transaction, commandTimeout);
            else
                conn.UpdateProductModelProductDescriptionCulture(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductModelProductDescriptionCulture(this IDbConnection conn, ProductModelProductDescriptionCulture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ProductModelProductDescriptionCulture]
                (
                    [CultureID],
                    [ModifiedDate],
                    [ProductDescriptionID],
                    [ProductModelID]
                )
                VALUES
                (
                    @CultureId,
                    @ModifiedDate,
                    @ProductDescriptionId,
                    @ProductModelId
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductModelProductDescriptionCulture(this IDbConnection conn, ProductModelProductDescriptionCulture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductModelProductDescriptionCulture] SET
                    [CultureID] = @CultureId,
                    [ModifiedDate] = @ModifiedDate,
                    [ProductDescriptionID] = @ProductDescriptionId,
                    [ProductModelID] = @ProductModelId
                WHERE
                    [ProductModelID] = @ProductModelId AND
                    [ProductDescriptionID] = @ProductDescriptionId AND
                    [CultureID] = @CultureId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductModelProductDescriptionCulture(this IDbConnection conn, ProductModelProductDescriptionCulture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductModelProductDescriptionCulture]
                WHERE
                    [ProductModelID] = @ProductModelId AND
                    [ProductDescriptionID] = @ProductDescriptionId AND
                    [CultureID] = @CultureId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductModelProductDescriptionCulture(this IDbConnection conn, int ProductModelId, int ProductDescriptionId, string CultureId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductModelProductDescriptionCulture]
                WHERE
                    [ProductModelID] = @ProductModelId AND
                    [ProductDescriptionID] = @ProductDescriptionId AND
                    [CultureID] = @CultureId";
            int deleted = conn.Execute(cmd, new { ProductModelId, ProductDescriptionId, CultureId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductModelProductDescriptionCulture

        #region ProductPhoto
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductPhoto(this IDbConnection conn, ProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductPhotoId == default(int))
                conn.InsertProductPhoto(e, transaction, commandTimeout);
            else
                conn.UpdateProductPhoto(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductPhoto(this IDbConnection conn, ProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ProductPhoto]
                (
                    [LargePhoto],
                    [LargePhotoFileName],
                    [ModifiedDate],
                    [ThumbNailPhoto],
                    [ThumbnailPhotoFileName]
                )
                VALUES
                (
                    @LargePhoto,
                    @LargePhotoFileName,
                    @ModifiedDate,
                    @ThumbNailPhoto,
                    @ThumbnailPhotoFileName
                )";
            e.ProductPhotoId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductPhoto(this IDbConnection conn, ProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductPhoto] SET
                    [LargePhoto] = @LargePhoto,
                    [LargePhotoFileName] = @LargePhotoFileName,
                    [ModifiedDate] = @ModifiedDate,
                    [ThumbNailPhoto] = @ThumbNailPhoto,
                    [ThumbnailPhotoFileName] = @ThumbnailPhotoFileName
                WHERE
                    [ProductPhotoID] = @ProductPhotoId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductPhoto(this IDbConnection conn, ProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductPhoto]
                WHERE
                    [ProductPhotoID] = @ProductPhotoId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductPhoto(this IDbConnection conn, int ProductPhotoId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductPhoto]
                WHERE
                    [ProductPhotoID] = @ProductPhotoId";
            int deleted = conn.Execute(cmd, new { ProductPhotoId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductPhoto

        #region ProductProductPhoto
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductProductPhoto(this IDbConnection conn, ProductProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int) && e.ProductPhotoId == default(int))
                conn.InsertProductProductPhoto(e, transaction, commandTimeout);
            else
                conn.UpdateProductProductPhoto(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductProductPhoto(this IDbConnection conn, ProductProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ProductProductPhoto]
                (
                    [ModifiedDate],
                    [Primary],
                    [ProductID],
                    [ProductPhotoID]
                )
                VALUES
                (
                    @ModifiedDate,
                    @Primary,
                    @ProductId,
                    @ProductPhotoId
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductProductPhoto(this IDbConnection conn, ProductProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductProductPhoto] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Primary] = @Primary,
                    [ProductID] = @ProductId,
                    [ProductPhotoID] = @ProductPhotoId
                WHERE
                    [ProductID] = @ProductId AND
                    [ProductPhotoID] = @ProductPhotoId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductProductPhoto(this IDbConnection conn, ProductProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductProductPhoto]
                WHERE
                    [ProductID] = @ProductId AND
                    [ProductPhotoID] = @ProductPhotoId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductProductPhoto(this IDbConnection conn, int ProductId, int ProductPhotoId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductProductPhoto]
                WHERE
                    [ProductID] = @ProductId AND
                    [ProductPhotoID] = @ProductPhotoId";
            int deleted = conn.Execute(cmd, new { ProductId, ProductPhotoId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductProductPhoto

        #region ProductReview
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductReview(this IDbConnection conn, ProductReview e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductReviewId == default(int))
                conn.InsertProductReview(e, transaction, commandTimeout);
            else
                conn.UpdateProductReview(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductReview(this IDbConnection conn, ProductReview e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ProductReview]
                (
                    [Comments],
                    [EmailAddress],
                    [ModifiedDate],
                    [ProductID],
                    [Rating],
                    [ReviewDate],
                    [ReviewerName]
                )
                VALUES
                (
                    @Comments,
                    @EmailAddress,
                    @ModifiedDate,
                    @ProductId,
                    @Rating,
                    @ReviewDate,
                    @ReviewerName
                )";
            e.ProductReviewId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductReview(this IDbConnection conn, ProductReview e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductReview] SET
                    [Comments] = @Comments,
                    [EmailAddress] = @EmailAddress,
                    [ModifiedDate] = @ModifiedDate,
                    [ProductID] = @ProductId,
                    [Rating] = @Rating,
                    [ReviewDate] = @ReviewDate,
                    [ReviewerName] = @ReviewerName
                WHERE
                    [ProductReviewID] = @ProductReviewId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductReview(this IDbConnection conn, ProductReview e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductReview]
                WHERE
                    [ProductReviewID] = @ProductReviewId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductReview(this IDbConnection conn, int ProductReviewId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductReview]
                WHERE
                    [ProductReviewID] = @ProductReviewId";
            int deleted = conn.Execute(cmd, new { ProductReviewId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductReview

        #region ProductSubcategory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductSubcategory(this IDbConnection conn, ProductSubcategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductSubcategoryId == default(int))
                conn.InsertProductSubcategory(e, transaction, commandTimeout);
            else
                conn.UpdateProductSubcategory(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductSubcategory_by_Name(this IDbConnection conn, ProductSubcategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertProductSubcategory(e, transaction, commandTimeout);
            else
                conn.UpdateProductSubcategory_by_Name(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductSubcategory_by_rowguid(this IDbConnection conn, ProductSubcategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertProductSubcategory(e, transaction, commandTimeout);
            else
                conn.UpdateProductSubcategory_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductSubcategory(this IDbConnection conn, ProductSubcategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ProductSubcategory]
                (
                    [ModifiedDate],
                    [Name],
                    [ProductCategoryID]
                )
                VALUES
                (
                    @ModifiedDate,
                    @Name,
                    @ProductCategoryId
                )";
            e.ProductSubcategoryId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductSubcategory(this IDbConnection conn, ProductSubcategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductSubcategory] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [ProductCategoryID] = @ProductCategoryId
                WHERE
                    [ProductSubcategoryID] = @ProductSubcategoryId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductSubcategory_by_Name(this IDbConnection conn, ProductSubcategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductSubcategory] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [ProductCategoryID] = @ProductCategoryId
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductSubcategory_by_rowguid(this IDbConnection conn, ProductSubcategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ProductSubcategory] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [ProductCategoryID] = @ProductCategoryId
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductSubcategory(this IDbConnection conn, ProductSubcategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductSubcategory]
                WHERE
                    [ProductSubcategoryID] = @ProductSubcategoryId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductSubcategory(this IDbConnection conn, int ProductSubcategoryId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ProductSubcategory]
                WHERE
                    [ProductSubcategoryID] = @ProductSubcategoryId";
            int deleted = conn.Execute(cmd, new { ProductSubcategoryId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductSubcategory

        #region ProductVendor
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveProductVendor(this IDbConnection conn, ProductVendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int) && e.BusinessEntityId == default(int))
                conn.InsertProductVendor(e, transaction, commandTimeout);
            else
                conn.UpdateProductVendor(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertProductVendor(this IDbConnection conn, ProductVendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Purchasing].[ProductVendor]
                (
                    [AverageLeadTime],
                    [BusinessEntityID],
                    [LastReceiptCost],
                    [LastReceiptDate],
                    [MaxOrderQty],
                    [MinOrderQty],
                    [ModifiedDate],
                    [OnOrderQty],
                    [ProductID],
                    [StandardPrice],
                    [UnitMeasureCode]
                )
                VALUES
                (
                    @AverageLeadTime,
                    @BusinessEntityId,
                    @LastReceiptCost,
                    @LastReceiptDate,
                    @MaxOrderQty,
                    @MinOrderQty,
                    @ModifiedDate,
                    @OnOrderQty,
                    @ProductId,
                    @StandardPrice,
                    @UnitMeasureCode
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateProductVendor(this IDbConnection conn, ProductVendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Purchasing].[ProductVendor] SET
                    [AverageLeadTime] = @AverageLeadTime,
                    [BusinessEntityID] = @BusinessEntityId,
                    [LastReceiptCost] = @LastReceiptCost,
                    [LastReceiptDate] = @LastReceiptDate,
                    [MaxOrderQty] = @MaxOrderQty,
                    [MinOrderQty] = @MinOrderQty,
                    [ModifiedDate] = @ModifiedDate,
                    [OnOrderQty] = @OnOrderQty,
                    [ProductID] = @ProductId,
                    [StandardPrice] = @StandardPrice,
                    [UnitMeasureCode] = @UnitMeasureCode
                WHERE
                    [ProductID] = @ProductId AND
                    [BusinessEntityID] = @BusinessEntityId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteProductVendor(this IDbConnection conn, ProductVendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Purchasing].[ProductVendor]
                WHERE
                    [ProductID] = @ProductId AND
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteProductVendor(this IDbConnection conn, int ProductId, int BusinessEntityId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Purchasing].[ProductVendor]
                WHERE
                    [ProductID] = @ProductId AND
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, new { ProductId, BusinessEntityId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ProductVendor

        #region PurchaseOrderDetail
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SavePurchaseOrderDetail(this IDbConnection conn, PurchaseOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.PurchaseOrderId == default(int) && e.PurchaseOrderDetailId == default(int))
                conn.InsertPurchaseOrderDetail(e, transaction, commandTimeout);
            else
                conn.UpdatePurchaseOrderDetail(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertPurchaseOrderDetail(this IDbConnection conn, PurchaseOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Purchasing].[PurchaseOrderDetail]
                (
                    [DueDate],
                    [ModifiedDate],
                    [OrderQty],
                    [ProductID],
                    [PurchaseOrderID],
                    [ReceivedQty],
                    [RejectedQty],
                    [UnitPrice]
                )
                VALUES
                (
                    @DueDate,
                    @ModifiedDate,
                    @OrderQty,
                    @ProductId,
                    @PurchaseOrderId,
                    @ReceivedQty,
                    @RejectedQty,
                    @UnitPrice
                )";
            e.PurchaseOrderDetailId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdatePurchaseOrderDetail(this IDbConnection conn, PurchaseOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Purchasing].[PurchaseOrderDetail] SET
                    [DueDate] = @DueDate,
                    [ModifiedDate] = @ModifiedDate,
                    [OrderQty] = @OrderQty,
                    [ProductID] = @ProductId,
                    [PurchaseOrderID] = @PurchaseOrderId,
                    [ReceivedQty] = @ReceivedQty,
                    [RejectedQty] = @RejectedQty,
                    [UnitPrice] = @UnitPrice
                WHERE
                    [PurchaseOrderID] = @PurchaseOrderId AND
                    [PurchaseOrderDetailID] = @PurchaseOrderDetailId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeletePurchaseOrderDetail(this IDbConnection conn, PurchaseOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Purchasing].[PurchaseOrderDetail]
                WHERE
                    [PurchaseOrderID] = @PurchaseOrderId AND
                    [PurchaseOrderDetailID] = @PurchaseOrderDetailId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeletePurchaseOrderDetail(this IDbConnection conn, int PurchaseOrderId, int PurchaseOrderDetailId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Purchasing].[PurchaseOrderDetail]
                WHERE
                    [PurchaseOrderID] = @PurchaseOrderId AND
                    [PurchaseOrderDetailID] = @PurchaseOrderDetailId";
            int deleted = conn.Execute(cmd, new { PurchaseOrderId, PurchaseOrderDetailId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion PurchaseOrderDetail

        #region PurchaseOrderHeader
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SavePurchaseOrderHeader(this IDbConnection conn, PurchaseOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.PurchaseOrderId == default(int))
                conn.InsertPurchaseOrderHeader(e, transaction, commandTimeout);
            else
                conn.UpdatePurchaseOrderHeader(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertPurchaseOrderHeader(this IDbConnection conn, PurchaseOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Purchasing].[PurchaseOrderHeader]
                (
                    [EmployeeID],
                    [Freight],
                    [ModifiedDate],
                    [OrderDate],
                    [RevisionNumber],
                    [ShipDate],
                    [ShipMethodID],
                    [Status],
                    [SubTotal],
                    [TaxAmt],
                    [VendorID]
                )
                VALUES
                (
                    @EmployeeId,
                    @Freight,
                    @ModifiedDate,
                    @OrderDate,
                    @RevisionNumber,
                    @ShipDate,
                    @ShipMethodId,
                    @Status,
                    @SubTotal,
                    @TaxAmt,
                    @VendorId
                )";
            e.PurchaseOrderId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdatePurchaseOrderHeader(this IDbConnection conn, PurchaseOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Purchasing].[PurchaseOrderHeader] SET
                    [EmployeeID] = @EmployeeId,
                    [Freight] = @Freight,
                    [ModifiedDate] = @ModifiedDate,
                    [OrderDate] = @OrderDate,
                    [RevisionNumber] = @RevisionNumber,
                    [ShipDate] = @ShipDate,
                    [ShipMethodID] = @ShipMethodId,
                    [Status] = @Status,
                    [SubTotal] = @SubTotal,
                    [TaxAmt] = @TaxAmt,
                    [VendorID] = @VendorId
                WHERE
                    [PurchaseOrderID] = @PurchaseOrderId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeletePurchaseOrderHeader(this IDbConnection conn, PurchaseOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Purchasing].[PurchaseOrderHeader]
                WHERE
                    [PurchaseOrderID] = @PurchaseOrderId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeletePurchaseOrderHeader(this IDbConnection conn, int PurchaseOrderId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Purchasing].[PurchaseOrderHeader]
                WHERE
                    [PurchaseOrderID] = @PurchaseOrderId";
            int deleted = conn.Execute(cmd, new { PurchaseOrderId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion PurchaseOrderHeader

        #region SalesOrderDetail
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesOrderDetail(this IDbConnection conn, SalesOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SalesOrderId == default(int) && e.SalesOrderDetailId == default(int))
                conn.InsertSalesOrderDetail(e, transaction, commandTimeout);
            else
                conn.UpdateSalesOrderDetail(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesOrderDetail_by_rowguid(this IDbConnection conn, SalesOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertSalesOrderDetail(e, transaction, commandTimeout);
            else
                conn.UpdateSalesOrderDetail_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertSalesOrderDetail(this IDbConnection conn, SalesOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[SalesOrderDetail]
                (
                    [CarrierTrackingNumber],
                    [ModifiedDate],
                    [OrderQty],
                    [ProductID],
                    [SalesOrderID],
                    [SpecialOfferID],
                    [UnitPrice],
                    [UnitPriceDiscount]
                )
                VALUES
                (
                    @CarrierTrackingNumber,
                    @ModifiedDate,
                    @OrderQty,
                    @ProductId,
                    @SalesOrderId,
                    @SpecialOfferId,
                    @UnitPrice,
                    @UnitPriceDiscount
                )";
            e.SalesOrderDetailId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesOrderDetail(this IDbConnection conn, SalesOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesOrderDetail] SET
                    [CarrierTrackingNumber] = @CarrierTrackingNumber,
                    [ModifiedDate] = @ModifiedDate,
                    [OrderQty] = @OrderQty,
                    [ProductID] = @ProductId,
                    [SalesOrderID] = @SalesOrderId,
                    [SpecialOfferID] = @SpecialOfferId,
                    [UnitPrice] = @UnitPrice,
                    [UnitPriceDiscount] = @UnitPriceDiscount
                WHERE
                    [SalesOrderID] = @SalesOrderId AND
                    [SalesOrderDetailID] = @SalesOrderDetailId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesOrderDetail_by_rowguid(this IDbConnection conn, SalesOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesOrderDetail] SET
                    [CarrierTrackingNumber] = @CarrierTrackingNumber,
                    [ModifiedDate] = @ModifiedDate,
                    [OrderQty] = @OrderQty,
                    [ProductID] = @ProductId,
                    [SalesOrderID] = @SalesOrderId,
                    [SpecialOfferID] = @SpecialOfferId,
                    [UnitPrice] = @UnitPrice,
                    [UnitPriceDiscount] = @UnitPriceDiscount
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteSalesOrderDetail(this IDbConnection conn, SalesOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesOrderDetail]
                WHERE
                    [SalesOrderID] = @SalesOrderId AND
                    [SalesOrderDetailID] = @SalesOrderDetailId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteSalesOrderDetail(this IDbConnection conn, int SalesOrderId, int SalesOrderDetailId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesOrderDetail]
                WHERE
                    [SalesOrderID] = @SalesOrderId AND
                    [SalesOrderDetailID] = @SalesOrderDetailId";
            int deleted = conn.Execute(cmd, new { SalesOrderId, SalesOrderDetailId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion SalesOrderDetail

        #region SalesOrderHeader
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesOrderHeader(this IDbConnection conn, SalesOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SalesOrderId == default(int))
                conn.InsertSalesOrderHeader(e, transaction, commandTimeout);
            else
                conn.UpdateSalesOrderHeader(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesOrderHeader_by_rowguid(this IDbConnection conn, SalesOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertSalesOrderHeader(e, transaction, commandTimeout);
            else
                conn.UpdateSalesOrderHeader_by_rowguid(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesOrderHeader_by_SalesOrderNumber(this IDbConnection conn, SalesOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SalesOrderNumber == null)
                conn.InsertSalesOrderHeader(e, transaction, commandTimeout);
            else
                conn.UpdateSalesOrderHeader_by_SalesOrderNumber(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertSalesOrderHeader(this IDbConnection conn, SalesOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[SalesOrderHeader]
                (
                    [AccountNumber],
                    [BillToAddressID],
                    [Comment],
                    [CreditCardApprovalCode],
                    [CreditCardID],
                    [CurrencyRateID],
                    [CustomerID],
                    [DueDate],
                    [Freight],
                    [ModifiedDate],
                    [OnlineOrderFlag],
                    [OrderDate],
                    [PurchaseOrderNumber],
                    [RevisionNumber],
                    [SalesPersonID],
                    [ShipDate],
                    [ShipMethodID],
                    [ShipToAddressID],
                    [Status],
                    [SubTotal],
                    [TaxAmt],
                    [TerritoryID]
                )
                VALUES
                (
                    @AccountNumber,
                    @BillToAddressId,
                    @Comment,
                    @CreditCardApprovalCode,
                    @CreditCardId,
                    @CurrencyRateId,
                    @CustomerId,
                    @DueDate,
                    @Freight,
                    @ModifiedDate,
                    @OnlineOrderFlag,
                    @OrderDate,
                    @PurchaseOrderNumber,
                    @RevisionNumber,
                    @SalesPersonId,
                    @ShipDate,
                    @ShipMethodId,
                    @ShipToAddressId,
                    @Status,
                    @SubTotal,
                    @TaxAmt,
                    @TerritoryId
                )";
            e.SalesOrderId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesOrderHeader(this IDbConnection conn, SalesOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesOrderHeader] SET
                    [AccountNumber] = @AccountNumber,
                    [BillToAddressID] = @BillToAddressId,
                    [Comment] = @Comment,
                    [CreditCardApprovalCode] = @CreditCardApprovalCode,
                    [CreditCardID] = @CreditCardId,
                    [CurrencyRateID] = @CurrencyRateId,
                    [CustomerID] = @CustomerId,
                    [DueDate] = @DueDate,
                    [Freight] = @Freight,
                    [ModifiedDate] = @ModifiedDate,
                    [OnlineOrderFlag] = @OnlineOrderFlag,
                    [OrderDate] = @OrderDate,
                    [PurchaseOrderNumber] = @PurchaseOrderNumber,
                    [RevisionNumber] = @RevisionNumber,
                    [SalesPersonID] = @SalesPersonId,
                    [ShipDate] = @ShipDate,
                    [ShipMethodID] = @ShipMethodId,
                    [ShipToAddressID] = @ShipToAddressId,
                    [Status] = @Status,
                    [SubTotal] = @SubTotal,
                    [TaxAmt] = @TaxAmt,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [SalesOrderID] = @SalesOrderId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesOrderHeader_by_rowguid(this IDbConnection conn, SalesOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesOrderHeader] SET
                    [AccountNumber] = @AccountNumber,
                    [BillToAddressID] = @BillToAddressId,
                    [Comment] = @Comment,
                    [CreditCardApprovalCode] = @CreditCardApprovalCode,
                    [CreditCardID] = @CreditCardId,
                    [CurrencyRateID] = @CurrencyRateId,
                    [CustomerID] = @CustomerId,
                    [DueDate] = @DueDate,
                    [Freight] = @Freight,
                    [ModifiedDate] = @ModifiedDate,
                    [OnlineOrderFlag] = @OnlineOrderFlag,
                    [OrderDate] = @OrderDate,
                    [PurchaseOrderNumber] = @PurchaseOrderNumber,
                    [RevisionNumber] = @RevisionNumber,
                    [SalesPersonID] = @SalesPersonId,
                    [ShipDate] = @ShipDate,
                    [ShipMethodID] = @ShipMethodId,
                    [ShipToAddressID] = @ShipToAddressId,
                    [Status] = @Status,
                    [SubTotal] = @SubTotal,
                    [TaxAmt] = @TaxAmt,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesOrderHeader_by_SalesOrderNumber(this IDbConnection conn, SalesOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesOrderHeader] SET
                    [AccountNumber] = @AccountNumber,
                    [BillToAddressID] = @BillToAddressId,
                    [Comment] = @Comment,
                    [CreditCardApprovalCode] = @CreditCardApprovalCode,
                    [CreditCardID] = @CreditCardId,
                    [CurrencyRateID] = @CurrencyRateId,
                    [CustomerID] = @CustomerId,
                    [DueDate] = @DueDate,
                    [Freight] = @Freight,
                    [ModifiedDate] = @ModifiedDate,
                    [OnlineOrderFlag] = @OnlineOrderFlag,
                    [OrderDate] = @OrderDate,
                    [PurchaseOrderNumber] = @PurchaseOrderNumber,
                    [RevisionNumber] = @RevisionNumber,
                    [SalesPersonID] = @SalesPersonId,
                    [ShipDate] = @ShipDate,
                    [ShipMethodID] = @ShipMethodId,
                    [ShipToAddressID] = @ShipToAddressId,
                    [Status] = @Status,
                    [SubTotal] = @SubTotal,
                    [TaxAmt] = @TaxAmt,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [SalesOrderNumber] = @SalesOrderNumber";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteSalesOrderHeader(this IDbConnection conn, SalesOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesOrderHeader]
                WHERE
                    [SalesOrderID] = @SalesOrderId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteSalesOrderHeader(this IDbConnection conn, int SalesOrderId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesOrderHeader]
                WHERE
                    [SalesOrderID] = @SalesOrderId";
            int deleted = conn.Execute(cmd, new { SalesOrderId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion SalesOrderHeader

        #region SalesOrderHeaderSalesReason
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesOrderHeaderSalesReason(this IDbConnection conn, SalesOrderHeaderSalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SalesOrderId == default(int) && e.SalesReasonId == default(int))
                conn.InsertSalesOrderHeaderSalesReason(e, transaction, commandTimeout);
            else
                conn.UpdateSalesOrderHeaderSalesReason(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertSalesOrderHeaderSalesReason(this IDbConnection conn, SalesOrderHeaderSalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[SalesOrderHeaderSalesReason]
                (
                    [ModifiedDate],
                    [SalesOrderID],
                    [SalesReasonID]
                )
                VALUES
                (
                    @ModifiedDate,
                    @SalesOrderId,
                    @SalesReasonId
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesOrderHeaderSalesReason(this IDbConnection conn, SalesOrderHeaderSalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesOrderHeaderSalesReason] SET
                    [ModifiedDate] = @ModifiedDate,
                    [SalesOrderID] = @SalesOrderId,
                    [SalesReasonID] = @SalesReasonId
                WHERE
                    [SalesOrderID] = @SalesOrderId AND
                    [SalesReasonID] = @SalesReasonId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteSalesOrderHeaderSalesReason(this IDbConnection conn, SalesOrderHeaderSalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesOrderHeaderSalesReason]
                WHERE
                    [SalesOrderID] = @SalesOrderId AND
                    [SalesReasonID] = @SalesReasonId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteSalesOrderHeaderSalesReason(this IDbConnection conn, int SalesOrderId, int SalesReasonId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesOrderHeaderSalesReason]
                WHERE
                    [SalesOrderID] = @SalesOrderId AND
                    [SalesReasonID] = @SalesReasonId";
            int deleted = conn.Execute(cmd, new { SalesOrderId, SalesReasonId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion SalesOrderHeaderSalesReason

        #region SalesPerson
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesPerson(this IDbConnection conn, SalesPerson e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                conn.InsertSalesPerson(e, transaction, commandTimeout);
            else
                conn.UpdateSalesPerson(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesPerson_by_rowguid(this IDbConnection conn, SalesPerson e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertSalesPerson(e, transaction, commandTimeout);
            else
                conn.UpdateSalesPerson_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertSalesPerson(this IDbConnection conn, SalesPerson e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[SalesPerson]
                (
                    [Bonus],
                    [BusinessEntityID],
                    [CommissionPct],
                    [ModifiedDate],
                    [SalesLastYear],
                    [SalesQuota],
                    [SalesYTD],
                    [TerritoryID]
                )
                VALUES
                (
                    @Bonus,
                    @BusinessEntityId,
                    @CommissionPct,
                    @ModifiedDate,
                    @SalesLastYear,
                    @SalesQuota,
                    @SalesYtd,
                    @TerritoryId
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesPerson(this IDbConnection conn, SalesPerson e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesPerson] SET
                    [Bonus] = @Bonus,
                    [BusinessEntityID] = @BusinessEntityId,
                    [CommissionPct] = @CommissionPct,
                    [ModifiedDate] = @ModifiedDate,
                    [SalesLastYear] = @SalesLastYear,
                    [SalesQuota] = @SalesQuota,
                    [SalesYTD] = @SalesYtd,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesPerson_by_rowguid(this IDbConnection conn, SalesPerson e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesPerson] SET
                    [Bonus] = @Bonus,
                    [BusinessEntityID] = @BusinessEntityId,
                    [CommissionPct] = @CommissionPct,
                    [ModifiedDate] = @ModifiedDate,
                    [SalesLastYear] = @SalesLastYear,
                    [SalesQuota] = @SalesQuota,
                    [SalesYTD] = @SalesYtd,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteSalesPerson(this IDbConnection conn, SalesPerson e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesPerson]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteSalesPerson(this IDbConnection conn, int BusinessEntityId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesPerson]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, new { BusinessEntityId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion SalesPerson

        #region SalesPersonQuotaHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesPersonQuotaHistory(this IDbConnection conn, SalesPersonQuotaHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.QuotaDate == default(DateTime))
                conn.InsertSalesPersonQuotaHistory(e, transaction, commandTimeout);
            else
                conn.UpdateSalesPersonQuotaHistory(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesPersonQuotaHistory_by_rowguid(this IDbConnection conn, SalesPersonQuotaHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertSalesPersonQuotaHistory(e, transaction, commandTimeout);
            else
                conn.UpdateSalesPersonQuotaHistory_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertSalesPersonQuotaHistory(this IDbConnection conn, SalesPersonQuotaHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[SalesPersonQuotaHistory]
                (
                    [BusinessEntityID],
                    [ModifiedDate],
                    [QuotaDate],
                    [SalesQuota]
                )
                VALUES
                (
                    @BusinessEntityId,
                    @ModifiedDate,
                    @QuotaDate,
                    @SalesQuota
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesPersonQuotaHistory(this IDbConnection conn, SalesPersonQuotaHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesPersonQuotaHistory] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [ModifiedDate] = @ModifiedDate,
                    [QuotaDate] = @QuotaDate,
                    [SalesQuota] = @SalesQuota
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [QuotaDate] = @QuotaDate";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesPersonQuotaHistory_by_rowguid(this IDbConnection conn, SalesPersonQuotaHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesPersonQuotaHistory] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [ModifiedDate] = @ModifiedDate,
                    [QuotaDate] = @QuotaDate,
                    [SalesQuota] = @SalesQuota
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteSalesPersonQuotaHistory(this IDbConnection conn, SalesPersonQuotaHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesPersonQuotaHistory]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [QuotaDate] = @QuotaDate";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteSalesPersonQuotaHistory(this IDbConnection conn, int BusinessEntityId, DateTime QuotaDate, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesPersonQuotaHistory]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [QuotaDate] = @QuotaDate";
            int deleted = conn.Execute(cmd, new { BusinessEntityId, QuotaDate }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion SalesPersonQuotaHistory

        #region SalesReason
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesReason(this IDbConnection conn, SalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SalesReasonId == default(int))
                conn.InsertSalesReason(e, transaction, commandTimeout);
            else
                conn.UpdateSalesReason(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertSalesReason(this IDbConnection conn, SalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[SalesReason]
                (
                    [ModifiedDate],
                    [Name],
                    [ReasonType]
                )
                VALUES
                (
                    @ModifiedDate,
                    @Name,
                    @ReasonType
                )";
            e.SalesReasonId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesReason(this IDbConnection conn, SalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesReason] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [ReasonType] = @ReasonType
                WHERE
                    [SalesReasonID] = @SalesReasonId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteSalesReason(this IDbConnection conn, SalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesReason]
                WHERE
                    [SalesReasonID] = @SalesReasonId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteSalesReason(this IDbConnection conn, int SalesReasonId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesReason]
                WHERE
                    [SalesReasonID] = @SalesReasonId";
            int deleted = conn.Execute(cmd, new { SalesReasonId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion SalesReason

        #region SalesTaxRate
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesTaxRate(this IDbConnection conn, SalesTaxRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SalesTaxRateId == default(int))
                conn.InsertSalesTaxRate(e, transaction, commandTimeout);
            else
                conn.UpdateSalesTaxRate(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesTaxRate_by_rowguid(this IDbConnection conn, SalesTaxRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertSalesTaxRate(e, transaction, commandTimeout);
            else
                conn.UpdateSalesTaxRate_by_rowguid(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesTaxRate_by_StateProvinceID_TaxType(this IDbConnection conn, SalesTaxRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.StateProvinceId == default(int) && e.TaxType == default(byte))
                conn.InsertSalesTaxRate(e, transaction, commandTimeout);
            else
                conn.UpdateSalesTaxRate_by_StateProvinceID_TaxType(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertSalesTaxRate(this IDbConnection conn, SalesTaxRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[SalesTaxRate]
                (
                    [ModifiedDate],
                    [Name],
                    [StateProvinceID],
                    [TaxRate],
                    [TaxType]
                )
                VALUES
                (
                    @ModifiedDate,
                    @Name,
                    @StateProvinceId,
                    @TaxRate,
                    @TaxType
                )";
            e.SalesTaxRateId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesTaxRate(this IDbConnection conn, SalesTaxRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesTaxRate] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [StateProvinceID] = @StateProvinceId,
                    [TaxRate] = @TaxRate,
                    [TaxType] = @TaxType
                WHERE
                    [SalesTaxRateID] = @SalesTaxRateId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesTaxRate_by_rowguid(this IDbConnection conn, SalesTaxRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesTaxRate] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [StateProvinceID] = @StateProvinceId,
                    [TaxRate] = @TaxRate,
                    [TaxType] = @TaxType
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesTaxRate_by_StateProvinceID_TaxType(this IDbConnection conn, SalesTaxRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesTaxRate] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [StateProvinceID] = @StateProvinceId,
                    [TaxRate] = @TaxRate,
                    [TaxType] = @TaxType
                WHERE
                    [StateProvinceID] = @StateProvinceId AND
                    [TaxType] = @TaxType";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteSalesTaxRate(this IDbConnection conn, SalesTaxRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesTaxRate]
                WHERE
                    [SalesTaxRateID] = @SalesTaxRateId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteSalesTaxRate(this IDbConnection conn, int SalesTaxRateId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesTaxRate]
                WHERE
                    [SalesTaxRateID] = @SalesTaxRateId";
            int deleted = conn.Execute(cmd, new { SalesTaxRateId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion SalesTaxRate

        #region SalesTerritory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesTerritory(this IDbConnection conn, SalesTerritory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.TerritoryId == default(int))
                conn.InsertSalesTerritory(e, transaction, commandTimeout);
            else
                conn.UpdateSalesTerritory(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesTerritory_by_Name(this IDbConnection conn, SalesTerritory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertSalesTerritory(e, transaction, commandTimeout);
            else
                conn.UpdateSalesTerritory_by_Name(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesTerritory_by_rowguid(this IDbConnection conn, SalesTerritory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertSalesTerritory(e, transaction, commandTimeout);
            else
                conn.UpdateSalesTerritory_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertSalesTerritory(this IDbConnection conn, SalesTerritory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[SalesTerritory]
                (
                    [CostLastYear],
                    [CostYTD],
                    [CountryRegionCode],
                    [Group],
                    [ModifiedDate],
                    [Name],
                    [SalesLastYear],
                    [SalesYTD]
                )
                VALUES
                (
                    @CostLastYear,
                    @CostYtd,
                    @CountryRegionCode,
                    @Group,
                    @ModifiedDate,
                    @Name,
                    @SalesLastYear,
                    @SalesYtd
                )";
            e.TerritoryId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesTerritory(this IDbConnection conn, SalesTerritory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesTerritory] SET
                    [CostLastYear] = @CostLastYear,
                    [CostYTD] = @CostYtd,
                    [CountryRegionCode] = @CountryRegionCode,
                    [Group] = @Group,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [SalesLastYear] = @SalesLastYear,
                    [SalesYTD] = @SalesYtd
                WHERE
                    [TerritoryID] = @TerritoryId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesTerritory_by_Name(this IDbConnection conn, SalesTerritory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesTerritory] SET
                    [CostLastYear] = @CostLastYear,
                    [CostYTD] = @CostYtd,
                    [CountryRegionCode] = @CountryRegionCode,
                    [Group] = @Group,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [SalesLastYear] = @SalesLastYear,
                    [SalesYTD] = @SalesYtd
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesTerritory_by_rowguid(this IDbConnection conn, SalesTerritory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesTerritory] SET
                    [CostLastYear] = @CostLastYear,
                    [CostYTD] = @CostYtd,
                    [CountryRegionCode] = @CountryRegionCode,
                    [Group] = @Group,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [SalesLastYear] = @SalesLastYear,
                    [SalesYTD] = @SalesYtd
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteSalesTerritory(this IDbConnection conn, SalesTerritory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesTerritory]
                WHERE
                    [TerritoryID] = @TerritoryId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteSalesTerritory(this IDbConnection conn, int TerritoryId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesTerritory]
                WHERE
                    [TerritoryID] = @TerritoryId";
            int deleted = conn.Execute(cmd, new { TerritoryId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion SalesTerritory

        #region SalesTerritoryHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesTerritoryHistory(this IDbConnection conn, SalesTerritoryHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.TerritoryId == default(int) && e.StartDate == default(DateTime))
                conn.InsertSalesTerritoryHistory(e, transaction, commandTimeout);
            else
                conn.UpdateSalesTerritoryHistory(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSalesTerritoryHistory_by_rowguid(this IDbConnection conn, SalesTerritoryHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertSalesTerritoryHistory(e, transaction, commandTimeout);
            else
                conn.UpdateSalesTerritoryHistory_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertSalesTerritoryHistory(this IDbConnection conn, SalesTerritoryHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[SalesTerritoryHistory]
                (
                    [BusinessEntityID],
                    [EndDate],
                    [ModifiedDate],
                    [StartDate],
                    [TerritoryID]
                )
                VALUES
                (
                    @BusinessEntityId,
                    @EndDate,
                    @ModifiedDate,
                    @StartDate,
                    @TerritoryId
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesTerritoryHistory(this IDbConnection conn, SalesTerritoryHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesTerritoryHistory] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [EndDate] = @EndDate,
                    [ModifiedDate] = @ModifiedDate,
                    [StartDate] = @StartDate,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [TerritoryID] = @TerritoryId AND
                    [StartDate] = @StartDate";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSalesTerritoryHistory_by_rowguid(this IDbConnection conn, SalesTerritoryHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SalesTerritoryHistory] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [EndDate] = @EndDate,
                    [ModifiedDate] = @ModifiedDate,
                    [StartDate] = @StartDate,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteSalesTerritoryHistory(this IDbConnection conn, SalesTerritoryHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesTerritoryHistory]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [TerritoryID] = @TerritoryId AND
                    [StartDate] = @StartDate";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteSalesTerritoryHistory(this IDbConnection conn, int BusinessEntityId, int TerritoryId, DateTime StartDate, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SalesTerritoryHistory]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId AND
                    [TerritoryID] = @TerritoryId AND
                    [StartDate] = @StartDate";
            int deleted = conn.Execute(cmd, new { BusinessEntityId, TerritoryId, StartDate }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion SalesTerritoryHistory

        #region ScrapReason
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveScrapReason(this IDbConnection conn, ScrapReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ScrapReasonId == default(short))
                conn.InsertScrapReason(e, transaction, commandTimeout);
            else
                conn.UpdateScrapReason(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveScrapReason_by_Name(this IDbConnection conn, ScrapReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertScrapReason(e, transaction, commandTimeout);
            else
                conn.UpdateScrapReason_by_Name(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertScrapReason(this IDbConnection conn, ScrapReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[ScrapReason]
                (
                    [ModifiedDate],
                    [Name]
                )
                VALUES
                (
                    @ModifiedDate,
                    @Name
                )";
            e.ScrapReasonId = conn.Query<short>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateScrapReason(this IDbConnection conn, ScrapReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ScrapReason] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [ScrapReasonID] = @ScrapReasonId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateScrapReason_by_Name(this IDbConnection conn, ScrapReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[ScrapReason] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteScrapReason(this IDbConnection conn, ScrapReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ScrapReason]
                WHERE
                    [ScrapReasonID] = @ScrapReasonId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteScrapReason(this IDbConnection conn, short ScrapReasonId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[ScrapReason]
                WHERE
                    [ScrapReasonID] = @ScrapReasonId";
            int deleted = conn.Execute(cmd, new { ScrapReasonId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ScrapReason

        #region Shift
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveShift(this IDbConnection conn, Shift e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ShiftId == default(byte))
                conn.InsertShift(e, transaction, commandTimeout);
            else
                conn.UpdateShift(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveShift_by_Name(this IDbConnection conn, Shift e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertShift(e, transaction, commandTimeout);
            else
                conn.UpdateShift_by_Name(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveShift_by_StartTime_EndTime(this IDbConnection conn, Shift e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.StartTime == default(DateTime) && e.EndTime == default(DateTime))
                conn.InsertShift(e, transaction, commandTimeout);
            else
                conn.UpdateShift_by_StartTime_EndTime(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertShift(this IDbConnection conn, Shift e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [HumanResources].[Shift]
                (
                    [EndTime],
                    [ModifiedDate],
                    [Name],
                    [StartTime]
                )
                VALUES
                (
                    @EndTime,
                    @ModifiedDate,
                    @Name,
                    @StartTime
                )";
            e.ShiftId = conn.Query<byte>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateShift(this IDbConnection conn, Shift e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [HumanResources].[Shift] SET
                    [EndTime] = @EndTime,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [StartTime] = @StartTime
                WHERE
                    [ShiftID] = @ShiftId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateShift_by_Name(this IDbConnection conn, Shift e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [HumanResources].[Shift] SET
                    [EndTime] = @EndTime,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [StartTime] = @StartTime
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateShift_by_StartTime_EndTime(this IDbConnection conn, Shift e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [HumanResources].[Shift] SET
                    [EndTime] = @EndTime,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [StartTime] = @StartTime
                WHERE
                    [StartTime] = @StartTime AND
                    [EndTime] = @EndTime";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteShift(this IDbConnection conn, Shift e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [HumanResources].[Shift]
                WHERE
                    [ShiftID] = @ShiftId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteShift(this IDbConnection conn, byte ShiftId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [HumanResources].[Shift]
                WHERE
                    [ShiftID] = @ShiftId";
            int deleted = conn.Execute(cmd, new { ShiftId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Shift

        #region ShipMethod
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveShipMethod(this IDbConnection conn, ShipMethod e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ShipMethodId == default(int))
                conn.InsertShipMethod(e, transaction, commandTimeout);
            else
                conn.UpdateShipMethod(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveShipMethod_by_Name(this IDbConnection conn, ShipMethod e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertShipMethod(e, transaction, commandTimeout);
            else
                conn.UpdateShipMethod_by_Name(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveShipMethod_by_rowguid(this IDbConnection conn, ShipMethod e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertShipMethod(e, transaction, commandTimeout);
            else
                conn.UpdateShipMethod_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertShipMethod(this IDbConnection conn, ShipMethod e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Purchasing].[ShipMethod]
                (
                    [ModifiedDate],
                    [Name],
                    [ShipBase],
                    [ShipRate]
                )
                VALUES
                (
                    @ModifiedDate,
                    @Name,
                    @ShipBase,
                    @ShipRate
                )";
            e.ShipMethodId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateShipMethod(this IDbConnection conn, ShipMethod e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Purchasing].[ShipMethod] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [ShipBase] = @ShipBase,
                    [ShipRate] = @ShipRate
                WHERE
                    [ShipMethodID] = @ShipMethodId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateShipMethod_by_Name(this IDbConnection conn, ShipMethod e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Purchasing].[ShipMethod] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [ShipBase] = @ShipBase,
                    [ShipRate] = @ShipRate
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateShipMethod_by_rowguid(this IDbConnection conn, ShipMethod e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Purchasing].[ShipMethod] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [ShipBase] = @ShipBase,
                    [ShipRate] = @ShipRate
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteShipMethod(this IDbConnection conn, ShipMethod e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Purchasing].[ShipMethod]
                WHERE
                    [ShipMethodID] = @ShipMethodId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteShipMethod(this IDbConnection conn, int ShipMethodId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Purchasing].[ShipMethod]
                WHERE
                    [ShipMethodID] = @ShipMethodId";
            int deleted = conn.Execute(cmd, new { ShipMethodId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ShipMethod

        #region ShoppingCartItem
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveShoppingCartItem(this IDbConnection conn, ShoppingCartItem e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ShoppingCartItemId == default(int))
                conn.InsertShoppingCartItem(e, transaction, commandTimeout);
            else
                conn.UpdateShoppingCartItem(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertShoppingCartItem(this IDbConnection conn, ShoppingCartItem e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[ShoppingCartItem]
                (
                    [DateCreated],
                    [ModifiedDate],
                    [ProductID],
                    [Quantity],
                    [ShoppingCartID]
                )
                VALUES
                (
                    @DateCreated,
                    @ModifiedDate,
                    @ProductId,
                    @Quantity,
                    @ShoppingCartId
                )";
            e.ShoppingCartItemId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateShoppingCartItem(this IDbConnection conn, ShoppingCartItem e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[ShoppingCartItem] SET
                    [DateCreated] = @DateCreated,
                    [ModifiedDate] = @ModifiedDate,
                    [ProductID] = @ProductId,
                    [Quantity] = @Quantity,
                    [ShoppingCartID] = @ShoppingCartId
                WHERE
                    [ShoppingCartItemID] = @ShoppingCartItemId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteShoppingCartItem(this IDbConnection conn, ShoppingCartItem e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[ShoppingCartItem]
                WHERE
                    [ShoppingCartItemID] = @ShoppingCartItemId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteShoppingCartItem(this IDbConnection conn, int ShoppingCartItemId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[ShoppingCartItem]
                WHERE
                    [ShoppingCartItemID] = @ShoppingCartItemId";
            int deleted = conn.Execute(cmd, new { ShoppingCartItemId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion ShoppingCartItem

        #region SpecialOffer
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSpecialOffer(this IDbConnection conn, SpecialOffer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SpecialOfferId == default(int))
                conn.InsertSpecialOffer(e, transaction, commandTimeout);
            else
                conn.UpdateSpecialOffer(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSpecialOffer_by_rowguid(this IDbConnection conn, SpecialOffer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertSpecialOffer(e, transaction, commandTimeout);
            else
                conn.UpdateSpecialOffer_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertSpecialOffer(this IDbConnection conn, SpecialOffer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[SpecialOffer]
                (
                    [Category],
                    [Description],
                    [DiscountPct],
                    [EndDate],
                    [MaxQty],
                    [MinQty],
                    [ModifiedDate],
                    [StartDate],
                    [Type]
                )
                VALUES
                (
                    @Category,
                    @Description,
                    @DiscountPct,
                    @EndDate,
                    @MaxQty,
                    @MinQty,
                    @ModifiedDate,
                    @StartDate,
                    @Type
                )";
            e.SpecialOfferId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSpecialOffer(this IDbConnection conn, SpecialOffer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SpecialOffer] SET
                    [Category] = @Category,
                    [Description] = @Description,
                    [DiscountPct] = @DiscountPct,
                    [EndDate] = @EndDate,
                    [MaxQty] = @MaxQty,
                    [MinQty] = @MinQty,
                    [ModifiedDate] = @ModifiedDate,
                    [StartDate] = @StartDate,
                    [Type] = @Type
                WHERE
                    [SpecialOfferID] = @SpecialOfferId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSpecialOffer_by_rowguid(this IDbConnection conn, SpecialOffer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SpecialOffer] SET
                    [Category] = @Category,
                    [Description] = @Description,
                    [DiscountPct] = @DiscountPct,
                    [EndDate] = @EndDate,
                    [MaxQty] = @MaxQty,
                    [MinQty] = @MinQty,
                    [ModifiedDate] = @ModifiedDate,
                    [StartDate] = @StartDate,
                    [Type] = @Type
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteSpecialOffer(this IDbConnection conn, SpecialOffer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SpecialOffer]
                WHERE
                    [SpecialOfferID] = @SpecialOfferId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteSpecialOffer(this IDbConnection conn, int SpecialOfferId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SpecialOffer]
                WHERE
                    [SpecialOfferID] = @SpecialOfferId";
            int deleted = conn.Execute(cmd, new { SpecialOfferId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion SpecialOffer

        #region SpecialOfferProduct
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSpecialOfferProduct(this IDbConnection conn, SpecialOfferProduct e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SpecialOfferId == default(int) && e.ProductId == default(int))
                conn.InsertSpecialOfferProduct(e, transaction, commandTimeout);
            else
                conn.UpdateSpecialOfferProduct(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveSpecialOfferProduct_by_rowguid(this IDbConnection conn, SpecialOfferProduct e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertSpecialOfferProduct(e, transaction, commandTimeout);
            else
                conn.UpdateSpecialOfferProduct_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertSpecialOfferProduct(this IDbConnection conn, SpecialOfferProduct e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[SpecialOfferProduct]
                (
                    [ModifiedDate],
                    [ProductID],
                    [SpecialOfferID]
                )
                VALUES
                (
                    @ModifiedDate,
                    @ProductId,
                    @SpecialOfferId
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSpecialOfferProduct(this IDbConnection conn, SpecialOfferProduct e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SpecialOfferProduct] SET
                    [ModifiedDate] = @ModifiedDate,
                    [ProductID] = @ProductId,
                    [SpecialOfferID] = @SpecialOfferId
                WHERE
                    [SpecialOfferID] = @SpecialOfferId AND
                    [ProductID] = @ProductId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateSpecialOfferProduct_by_rowguid(this IDbConnection conn, SpecialOfferProduct e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[SpecialOfferProduct] SET
                    [ModifiedDate] = @ModifiedDate,
                    [ProductID] = @ProductId,
                    [SpecialOfferID] = @SpecialOfferId
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteSpecialOfferProduct(this IDbConnection conn, SpecialOfferProduct e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SpecialOfferProduct]
                WHERE
                    [SpecialOfferID] = @SpecialOfferId AND
                    [ProductID] = @ProductId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteSpecialOfferProduct(this IDbConnection conn, int SpecialOfferId, int ProductId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[SpecialOfferProduct]
                WHERE
                    [SpecialOfferID] = @SpecialOfferId AND
                    [ProductID] = @ProductId";
            int deleted = conn.Execute(cmd, new { SpecialOfferId, ProductId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion SpecialOfferProduct

        #region StateProvince
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveStateProvince(this IDbConnection conn, StateProvince e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.StateProvinceId == default(int))
                conn.InsertStateProvince(e, transaction, commandTimeout);
            else
                conn.UpdateStateProvince(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveStateProvince_by_Name(this IDbConnection conn, StateProvince e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertStateProvince(e, transaction, commandTimeout);
            else
                conn.UpdateStateProvince_by_Name(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveStateProvince_by_rowguid(this IDbConnection conn, StateProvince e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertStateProvince(e, transaction, commandTimeout);
            else
                conn.UpdateStateProvince_by_rowguid(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveStateProvince_by_StateProvinceCode_CountryRegionCode(this IDbConnection conn, StateProvince e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.StateProvinceCode == null && e.CountryRegionCode == null)
                conn.InsertStateProvince(e, transaction, commandTimeout);
            else
                conn.UpdateStateProvince_by_StateProvinceCode_CountryRegionCode(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertStateProvince(this IDbConnection conn, StateProvince e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Person].[StateProvince]
                (
                    [CountryRegionCode],
                    [IsOnlyStateProvinceFlag],
                    [ModifiedDate],
                    [Name],
                    [StateProvinceCode],
                    [TerritoryID]
                )
                VALUES
                (
                    @CountryRegionCode,
                    @IsOnlyStateProvinceFlag,
                    @ModifiedDate,
                    @Name,
                    @StateProvinceCode,
                    @TerritoryId
                )";
            e.StateProvinceId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateStateProvince(this IDbConnection conn, StateProvince e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[StateProvince] SET
                    [CountryRegionCode] = @CountryRegionCode,
                    [IsOnlyStateProvinceFlag] = @IsOnlyStateProvinceFlag,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [StateProvinceCode] = @StateProvinceCode,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [StateProvinceID] = @StateProvinceId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateStateProvince_by_Name(this IDbConnection conn, StateProvince e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[StateProvince] SET
                    [CountryRegionCode] = @CountryRegionCode,
                    [IsOnlyStateProvinceFlag] = @IsOnlyStateProvinceFlag,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [StateProvinceCode] = @StateProvinceCode,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateStateProvince_by_rowguid(this IDbConnection conn, StateProvince e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[StateProvince] SET
                    [CountryRegionCode] = @CountryRegionCode,
                    [IsOnlyStateProvinceFlag] = @IsOnlyStateProvinceFlag,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [StateProvinceCode] = @StateProvinceCode,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateStateProvince_by_StateProvinceCode_CountryRegionCode(this IDbConnection conn, StateProvince e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Person].[StateProvince] SET
                    [CountryRegionCode] = @CountryRegionCode,
                    [IsOnlyStateProvinceFlag] = @IsOnlyStateProvinceFlag,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [StateProvinceCode] = @StateProvinceCode,
                    [TerritoryID] = @TerritoryId
                WHERE
                    [StateProvinceCode] = @StateProvinceCode AND
                    [CountryRegionCode] = @CountryRegionCode";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteStateProvince(this IDbConnection conn, StateProvince e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[StateProvince]
                WHERE
                    [StateProvinceID] = @StateProvinceId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteStateProvince(this IDbConnection conn, int StateProvinceId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Person].[StateProvince]
                WHERE
                    [StateProvinceID] = @StateProvinceId";
            int deleted = conn.Execute(cmd, new { StateProvinceId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion StateProvince

        #region Store
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveStore(this IDbConnection conn, Store e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                conn.InsertStore(e, transaction, commandTimeout);
            else
                conn.UpdateStore(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveStore_by_rowguid(this IDbConnection conn, Store e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Rowguid == default(Guid))
                conn.InsertStore(e, transaction, commandTimeout);
            else
                conn.UpdateStore_by_rowguid(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertStore(this IDbConnection conn, Store e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Sales].[Store]
                (
                    [BusinessEntityID],
                    [Demographics],
                    [ModifiedDate],
                    [Name],
                    [SalesPersonID]
                )
                VALUES
                (
                    @BusinessEntityId,
                    @Demographics,
                    @ModifiedDate,
                    @Name,
                    @SalesPersonId
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateStore(this IDbConnection conn, Store e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[Store] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [Demographics] = @Demographics,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [SalesPersonID] = @SalesPersonId
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateStore_by_rowguid(this IDbConnection conn, Store e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Sales].[Store] SET
                    [BusinessEntityID] = @BusinessEntityId,
                    [Demographics] = @Demographics,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [SalesPersonID] = @SalesPersonId
                WHERE
                    [rowguid] = @Rowguid";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteStore(this IDbConnection conn, Store e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[Store]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteStore(this IDbConnection conn, int BusinessEntityId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Sales].[Store]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, new { BusinessEntityId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Store

        #region TransactionHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveTransactionHistory(this IDbConnection conn, TransactionHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.TransactionId == default(int))
                conn.InsertTransactionHistory(e, transaction, commandTimeout);
            else
                conn.UpdateTransactionHistory(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertTransactionHistory(this IDbConnection conn, TransactionHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[TransactionHistory]
                (
                    [ActualCost],
                    [ModifiedDate],
                    [ProductID],
                    [Quantity],
                    [ReferenceOrderID],
                    [ReferenceOrderLineID],
                    [TransactionDate],
                    [TransactionType]
                )
                VALUES
                (
                    @ActualCost,
                    @ModifiedDate,
                    @ProductId,
                    @Quantity,
                    @ReferenceOrderId,
                    @ReferenceOrderLineId,
                    @TransactionDate,
                    @TransactionType
                )";
            e.TransactionId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateTransactionHistory(this IDbConnection conn, TransactionHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[TransactionHistory] SET
                    [ActualCost] = @ActualCost,
                    [ModifiedDate] = @ModifiedDate,
                    [ProductID] = @ProductId,
                    [Quantity] = @Quantity,
                    [ReferenceOrderID] = @ReferenceOrderId,
                    [ReferenceOrderLineID] = @ReferenceOrderLineId,
                    [TransactionDate] = @TransactionDate,
                    [TransactionType] = @TransactionType
                WHERE
                    [TransactionID] = @TransactionId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteTransactionHistory(this IDbConnection conn, TransactionHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[TransactionHistory]
                WHERE
                    [TransactionID] = @TransactionId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteTransactionHistory(this IDbConnection conn, int TransactionId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[TransactionHistory]
                WHERE
                    [TransactionID] = @TransactionId";
            int deleted = conn.Execute(cmd, new { TransactionId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion TransactionHistory

        #region TransactionHistoryArchive
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveTransactionHistoryArchive(this IDbConnection conn, TransactionHistoryArchive e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.TransactionId == default(int))
                conn.InsertTransactionHistoryArchive(e, transaction, commandTimeout);
            else
                conn.UpdateTransactionHistoryArchive(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertTransactionHistoryArchive(this IDbConnection conn, TransactionHistoryArchive e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[TransactionHistoryArchive]
                (
                    [ActualCost],
                    [ModifiedDate],
                    [ProductID],
                    [Quantity],
                    [ReferenceOrderID],
                    [ReferenceOrderLineID],
                    [TransactionDate],
                    [TransactionID],
                    [TransactionType]
                )
                VALUES
                (
                    @ActualCost,
                    @ModifiedDate,
                    @ProductId,
                    @Quantity,
                    @ReferenceOrderId,
                    @ReferenceOrderLineId,
                    @TransactionDate,
                    @TransactionId,
                    @TransactionType
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateTransactionHistoryArchive(this IDbConnection conn, TransactionHistoryArchive e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[TransactionHistoryArchive] SET
                    [ActualCost] = @ActualCost,
                    [ModifiedDate] = @ModifiedDate,
                    [ProductID] = @ProductId,
                    [Quantity] = @Quantity,
                    [ReferenceOrderID] = @ReferenceOrderId,
                    [ReferenceOrderLineID] = @ReferenceOrderLineId,
                    [TransactionDate] = @TransactionDate,
                    [TransactionID] = @TransactionId,
                    [TransactionType] = @TransactionType
                WHERE
                    [TransactionID] = @TransactionId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteTransactionHistoryArchive(this IDbConnection conn, TransactionHistoryArchive e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[TransactionHistoryArchive]
                WHERE
                    [TransactionID] = @TransactionId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteTransactionHistoryArchive(this IDbConnection conn, int TransactionId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[TransactionHistoryArchive]
                WHERE
                    [TransactionID] = @TransactionId";
            int deleted = conn.Execute(cmd, new { TransactionId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion TransactionHistoryArchive

        #region UnitMeasure
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveUnitMeasure(this IDbConnection conn, UnitMeasure e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.UnitMeasureCode == null)
                conn.InsertUnitMeasure(e, transaction, commandTimeout);
            else
                conn.UpdateUnitMeasure(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveUnitMeasure_by_Name(this IDbConnection conn, UnitMeasure e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.Name == null)
                conn.InsertUnitMeasure(e, transaction, commandTimeout);
            else
                conn.UpdateUnitMeasure_by_Name(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertUnitMeasure(this IDbConnection conn, UnitMeasure e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[UnitMeasure]
                (
                    [ModifiedDate],
                    [Name],
                    [UnitMeasureCode]
                )
                VALUES
                (
                    @ModifiedDate,
                    @Name,
                    @UnitMeasureCode
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateUnitMeasure(this IDbConnection conn, UnitMeasure e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[UnitMeasure] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [UnitMeasureCode] = @UnitMeasureCode
                WHERE
                    [UnitMeasureCode] = @UnitMeasureCode";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateUnitMeasure_by_Name(this IDbConnection conn, UnitMeasure e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[UnitMeasure] SET
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [UnitMeasureCode] = @UnitMeasureCode
                WHERE
                    [Name] = @Name";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteUnitMeasure(this IDbConnection conn, UnitMeasure e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[UnitMeasure]
                WHERE
                    [UnitMeasureCode] = @UnitMeasureCode";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteUnitMeasure(this IDbConnection conn, string UnitMeasureCode, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[UnitMeasure]
                WHERE
                    [UnitMeasureCode] = @UnitMeasureCode";
            int deleted = conn.Execute(cmd, new { UnitMeasureCode }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion UnitMeasure

        #region Vendor
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveVendor(this IDbConnection conn, Vendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                conn.InsertVendor(e, transaction, commandTimeout);
            else
                conn.UpdateVendor(e, transaction, commandTimeout);
        }

        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveVendor_by_AccountNumber(this IDbConnection conn, Vendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.AccountNumber == null)
                conn.InsertVendor(e, transaction, commandTimeout);
            else
                conn.UpdateVendor_by_AccountNumber(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertVendor(this IDbConnection conn, Vendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Purchasing].[Vendor]
                (
                    [AccountNumber],
                    [ActiveFlag],
                    [BusinessEntityID],
                    [CreditRating],
                    [ModifiedDate],
                    [Name],
                    [PreferredVendorStatus],
                    [PurchasingWebServiceURL]
                )
                VALUES
                (
                    @AccountNumber,
                    @ActiveFlag,
                    @BusinessEntityId,
                    @CreditRating,
                    @ModifiedDate,
                    @Name,
                    @PreferredVendorStatus,
                    @PurchasingWebServiceUrl
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateVendor(this IDbConnection conn, Vendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Purchasing].[Vendor] SET
                    [AccountNumber] = @AccountNumber,
                    [ActiveFlag] = @ActiveFlag,
                    [BusinessEntityID] = @BusinessEntityId,
                    [CreditRating] = @CreditRating,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [PreferredVendorStatus] = @PreferredVendorStatus,
                    [PurchasingWebServiceURL] = @PurchasingWebServiceUrl
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }

        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateVendor_by_AccountNumber(this IDbConnection conn, Vendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Purchasing].[Vendor] SET
                    [AccountNumber] = @AccountNumber,
                    [ActiveFlag] = @ActiveFlag,
                    [BusinessEntityID] = @BusinessEntityId,
                    [CreditRating] = @CreditRating,
                    [ModifiedDate] = @ModifiedDate,
                    [Name] = @Name,
                    [PreferredVendorStatus] = @PreferredVendorStatus,
                    [PurchasingWebServiceURL] = @PurchasingWebServiceUrl
                WHERE
                    [AccountNumber] = @AccountNumber";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteVendor(this IDbConnection conn, Vendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Purchasing].[Vendor]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteVendor(this IDbConnection conn, int BusinessEntityId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Purchasing].[Vendor]
                WHERE
                    [BusinessEntityID] = @BusinessEntityId";
            int deleted = conn.Execute(cmd, new { BusinessEntityId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion Vendor

        #region WorkOrder
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveWorkOrder(this IDbConnection conn, WorkOrder e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.WorkOrderId == default(int))
                conn.InsertWorkOrder(e, transaction, commandTimeout);
            else
                conn.UpdateWorkOrder(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertWorkOrder(this IDbConnection conn, WorkOrder e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[WorkOrder]
                (
                    [DueDate],
                    [EndDate],
                    [ModifiedDate],
                    [OrderQty],
                    [ProductID],
                    [ScrappedQty],
                    [ScrapReasonID],
                    [StartDate]
                )
                VALUES
                (
                    @DueDate,
                    @EndDate,
                    @ModifiedDate,
                    @OrderQty,
                    @ProductId,
                    @ScrappedQty,
                    @ScrapReasonId,
                    @StartDate
                )";
            e.WorkOrderId = conn.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateWorkOrder(this IDbConnection conn, WorkOrder e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[WorkOrder] SET
                    [DueDate] = @DueDate,
                    [EndDate] = @EndDate,
                    [ModifiedDate] = @ModifiedDate,
                    [OrderQty] = @OrderQty,
                    [ProductID] = @ProductId,
                    [ScrappedQty] = @ScrappedQty,
                    [ScrapReasonID] = @ScrapReasonId,
                    [StartDate] = @StartDate
                WHERE
                    [WorkOrderID] = @WorkOrderId";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteWorkOrder(this IDbConnection conn, WorkOrder e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[WorkOrder]
                WHERE
                    [WorkOrderID] = @WorkOrderId";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteWorkOrder(this IDbConnection conn, int WorkOrderId, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[WorkOrder]
                WHERE
                    [WorkOrderID] = @WorkOrderId";
            int deleted = conn.Execute(cmd, new { WorkOrderId }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion WorkOrder

        #region WorkOrderRouting
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public static void SaveWorkOrderRouting(this IDbConnection conn, WorkOrderRouting e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.WorkOrderId == default(int) && e.ProductId == default(int) && e.OperationSequence == default(short))
                conn.InsertWorkOrderRouting(e, transaction, commandTimeout);
            else
                conn.UpdateWorkOrderRouting(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public static void InsertWorkOrderRouting(this IDbConnection conn, WorkOrderRouting e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                INSERT INTO [Production].[WorkOrderRouting]
                (
                    [ActualCost],
                    [ActualEndDate],
                    [ActualResourceHrs],
                    [ActualStartDate],
                    [LocationID],
                    [ModifiedDate],
                    [OperationSequence],
                    [PlannedCost],
                    [ProductID],
                    [ScheduledEndDate],
                    [ScheduledStartDate],
                    [WorkOrderID]
                )
                VALUES
                (
                    @ActualCost,
                    @ActualEndDate,
                    @ActualResourceHrs,
                    @ActualStartDate,
                    @LocationId,
                    @ModifiedDate,
                    @OperationSequence,
                    @PlannedCost,
                    @ProductId,
                    @ScheduledEndDate,
                    @ScheduledStartDate,
                    @WorkOrderId
                )";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public static void UpdateWorkOrderRouting(this IDbConnection conn, WorkOrderRouting e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                UPDATE [Production].[WorkOrderRouting] SET
                    [ActualCost] = @ActualCost,
                    [ActualEndDate] = @ActualEndDate,
                    [ActualResourceHrs] = @ActualResourceHrs,
                    [ActualStartDate] = @ActualStartDate,
                    [LocationID] = @LocationId,
                    [ModifiedDate] = @ModifiedDate,
                    [OperationSequence] = @OperationSequence,
                    [PlannedCost] = @PlannedCost,
                    [ProductID] = @ProductId,
                    [ScheduledEndDate] = @ScheduledEndDate,
                    [ScheduledStartDate] = @ScheduledStartDate,
                    [WorkOrderID] = @WorkOrderId
                WHERE
                    [WorkOrderID] = @WorkOrderId AND
                    [ProductID] = @ProductId AND
                    [OperationSequence] = @OperationSequence";
            conn.Execute(cmd, e, transaction, commandTimeout);

            e.MarkAsClean();
        }
        /// <summary>
        /// Deletes record
        /// </summary>
        public static bool DeleteWorkOrderRouting(this IDbConnection conn, WorkOrderRouting e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[WorkOrderRouting]
                WHERE
                    [WorkOrderID] = @WorkOrderId AND
                    [ProductID] = @ProductId AND
                    [OperationSequence] = @OperationSequence";
            int deleted = conn.Execute(cmd, e, transaction, commandTimeout);
            return deleted > 0;
        }
        /// <summary>
        /// Deletes record by the primary key
        /// </summary>
        public static bool DeleteWorkOrderRouting(this IDbConnection conn, int WorkOrderId, int ProductId, short OperationSequence, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
                DELETE [Production].[WorkOrderRouting]
                WHERE
                    [WorkOrderID] = @WorkOrderId AND
                    [ProductID] = @ProductId AND
                    [OperationSequence] = @OperationSequence";
            int deleted = conn.Execute(cmd, new { WorkOrderId, ProductId, OperationSequence }, transaction, commandTimeout);
            return deleted > 0;
        }
        #endregion WorkOrderRouting
    }
}
